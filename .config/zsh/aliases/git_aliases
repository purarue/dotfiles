#!/bin/zsh

# modified from https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/git/git.plugin.zsh
# to work with both zsh and bash

# Functions
#

# The name of the current branch
function git_current_branch() {
	local ref
	ref=$(git symbolic-ref --quiet HEAD 2>/dev/null)
	local ret=$?
	if [[ $ret != 0 ]]; then
		[[ $ret == 128 ]] && return # no git repo.
		ref=$(git rev-parse --short HEAD 2>/dev/null) || return
	fi
	echo ${ref#refs/heads/}
}

# Pretty log messages
function _git_log_prettily() {
	if ! [ -z $1 ]; then
		git log --pretty=$1
	fi
}

# Check if main exists and use instead of master
function git_main_branch() {
	command git rev-parse --git-dir &>/dev/null || return
	local ref
	for ref in refs/{heads,remotes/{origin,upstream}}/{main,trunk}; do
		if command git show-ref -q --verify $ref; then
			echo ${ref:t}
			return
		fi
	done
	echo master
}

# Check for develop and similarly named branches
function git_develop_branch() {
	command git rev-parse --git-dir &>/dev/null || return
	local branch
	for branch in staging dev devel development; do
		if command git show-ref -q --verify refs/heads/$branch; then
			echo $branch
			return
		fi
	done
	echo develop
}

#
# Aliases
# (sorted alphabetically)
#

abbrev-alias ga='git add'
abbrev-alias gA='git add --all'
abbrev-alias gaa='git add --all'
abbrev-alias gapa='git add --patch'
abbrev-alias gau='git add --update'
abbrev-alias gav='git add --verbose'
abbrev-alias gap='git apply'
abbrev-alias gapt='git apply --3way'

abbrev-alias gb='git branch'
abbrev-alias gba='git branch -a'
abbrev-alias gbd='git branch -d'
abbrev-alias gbda='git branch --no-color --merged | command grep -vE "^([+*]|\s*($(git_main_branch)|$(git_develop_branch))\s*$)" | command xargs git branch -d 2>/dev/null'
abbrev-alias gbD='git branch -D'
abbrev-alias gbl='git blame -b -w'
abbrev-alias gbnm='git branch --no-merged'
abbrev-alias gbr='git branch --remote'
abbrev-alias gbs='git bisect'
abbrev-alias gbsb='git bisect bad'
abbrev-alias gbsg='git bisect good'
abbrev-alias gbsr='git bisect reset'
abbrev-alias gbss='git bisect start'

abbrev-alias gc='git commit -v'
abbrev-alias gc!='git commit -v --amend'
abbrev-alias gcn!='git commit -v --no-edit --amend'
abbrev-alias gca='git commit -v -a'
abbrev-alias gca!='git commit -v -a --amend'
abbrev-alias gcan!='git commit -v -a --no-edit --amend'
abbrev-alias gcans!='git commit -v -a -s --no-edit --amend'
abbrev-alias gcam='git commit -a -m'
abbrev-alias gcsm='git commit -s -m'
abbrev-alias gcas='git commit -a -s'
abbrev-alias gcasm='git commit -a -s -m'
abbrev-alias gcb='git checkout -b'
abbrev-alias gcf='git config --list'

abbrev-alias gcl='git clone --recurse-submodules'
abbrev-alias gclean='git clean -id'
abbrev-alias gpristine='git reset --hard && git clean -dffx'
abbrev-alias gcm='git checkout $(git_main_branch)'
abbrev-alias gcd='git checkout $(git_develop_branch)'
abbrev-alias gcmsg='git commit -m'
abbrev-alias gco='git checkout'
abbrev-alias gcor='git checkout --recurse-submodules'
abbrev-alias gcount='git shortlog -sn'
abbrev-alias gchp='git cherry-pick'
abbrev-alias gcpa='git cherry-pick --abort'
abbrev-alias gcpc='git cherry-pick --continue'
abbrev-alias gcs='git commit -S'
abbrev-alias gcss='git commit -S -s'
abbrev-alias gcssm='git commit -S -s -m'

abbrev-alias gd='git diff'
abbrev-alias gdca='git diff --cached'
abbrev-alias gdcw='git diff --cached --word-diff'
abbrev-alias gdct='git describe --tags $(git rev-list --tags --max-count=1)'
abbrev-alias gds='git diff --staged'
abbrev-alias gdt='git diff-tree --no-commit-id --name-only -r'
abbrev-alias gdup='git diff @{upstream}'
abbrev-alias gdw='git diff --word-diff'
abbrev-alias gdm='git diff "$(git_main_branch)" HEAD'

# git commit and push; provide positional arguments as commit message
gcp() {
	if [[ -z "$1" ]]; then
		git commit && git push
	else
		git commit -m "$*" && git push
	fi
}
# compdef _git-commit gcp
abbrev-alias gpn='git push --no-verify'

gcnmp() {
	local args=()
	[[ -n "$1" ]] && args+=(-m "$*")
	git commit --no-verify "${args[@]}" && git push --no-verify
}
# compdef _git-commit gcnmp

gdh() {
	git diff HEAD~"${1:-1}" HEAD
}
# compdef _git-diff gdh

# clone some repo and cd into it
gclcd() {
	gcl "${1:?Provide something to git clone}"
	cd "$(newest -include-dirs)"
}

function gdnolock() {
	git diff "$@" ":(exclude)package-lock.json" ":(exclude)*.lock"
}

function gdv() {
	git diff -w "$@" | view -
}

abbrev-alias gf='git fetch'
abbrev-alias gfa='git fetch --all --prune --jobs=10'
abbrev-alias gfo='git fetch origin'

abbrev-alias gfg='git ls-files | grep'

abbrev-alias gg='git gui citool'
abbrev-alias gga='git gui citool --amend'

function ggf() {
	[[ "$#" != 1 ]] && local b="$(git_current_branch)"
	git push --force origin "${b:=$1}"
}
function ggfl() {
	[[ "$#" != 1 ]] && local b="$(git_current_branch)"
	git push --force-with-lease origin "${b:=$1}"
}

function ggl() {
	if [[ "$#" != 0 ]] && [[ "$#" != 1 ]]; then
		git pull origin "${*}"
	else
		[[ "$#" == 0 ]] && local b="$(git_current_branch)"
		git pull origin "${b:=$1}"
	fi
}

function ggp() {
	if [[ "$#" != 0 ]] && [[ "$#" != 1 ]]; then
		git push origin "${*}"
	else
		[[ "$#" == 0 ]] && local b="$(git_current_branch)"
		git push origin "${b:=$1}"
	fi
}

function ggpnp() {
	if [[ "$#" == 0 ]]; then
		ggl && ggp
	else
		ggl "${*}" && ggp "${*}"
	fi
}

function ggu() {
	[[ "$#" != 1 ]] && local b="$(git_current_branch)"
	git pull --rebase origin "${b:=$1}"
}

abbrev-alias ggpur='ggu'
abbrev-alias ggpull='git pull origin "$(git_current_branch)"'
abbrev-alias ggpush='git push origin "$(git_current_branch)"'

abbrev-alias ggsup='git branch --set-upstream-to=origin/$(git_current_branch)'
abbrev-alias gpsup='git push --set-upstream origin $(git_current_branch)'

abbrev-alias ghh='git help'

abbrev-alias gignore='git update-index --assume-unchanged'
abbrev-alias gignored='git ls-files -v | grep "^[[:lower:]]"'
abbrev-alias git-svn-dcommit-push='git svn dcommit && git push github $(git_main_branch):svntrunk'

abbrev-alias gk='\gitk --all --branches &!'
abbrev-alias gke='\gitk --all $(git log -g --pretty=%h) &!'

abbrev-alias gl='git pull'
abbrev-alias glg='git log --stat'
abbrev-alias glgp='git log --stat -p'
abbrev-alias glgg='git log --graph'
abbrev-alias glgga='git log --graph --decorate --all'
abbrev-alias glgm='git log --graph --max-count=10'
abbrev-alias glo='git log --oneline --decorate'
abbrev-alias glol="git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset'"
abbrev-alias glols="git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset' --stat"
abbrev-alias glod="git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset'"
abbrev-alias glods="git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset' --date=short"
abbrev-alias glola="git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset' --all"
abbrev-alias glog='git log --oneline --decorate --graph'
abbrev-alias gloga='git log --oneline --decorate --graph --all'
abbrev-alias glp="_git_log_prettily"

abbrev-alias gm='git merge'
abbrev-alias gmom='git merge origin/$(git_main_branch)'
abbrev-alias gmtl='git mergetool --no-prompt'
abbrev-alias gmtlvim='git mergetool --no-prompt --tool=vimdiff'
abbrev-alias gmum='git merge upstream/$(git_main_branch)'
abbrev-alias gma='git merge --abort'

abbrev-alias gp='git push'
abbrev-alias gpd='git push --dry-run'
abbrev-alias gpf='git push --force-with-lease'
abbrev-alias gpf!='git push --force'
abbrev-alias gpoat='git push origin --all && git push origin --tags'
abbrev-alias gpr='git pull --rebase'
abbrev-alias gpu='git push upstream'
abbrev-alias gpv='git push -v'

abbrev-alias gr='git remote'
abbrev-alias gra='git remote add'
abbrev-alias grb='git rebase'
abbrev-alias grba='git rebase --abort'
abbrev-alias grbc='git rebase --continue'
abbrev-alias grbd='git rebase $(git_develop_branch)'
abbrev-alias grbi='git rebase -i'
abbrev-alias grbm='git rebase $(git_main_branch)'
abbrev-alias grbom='git rebase origin/$(git_main_branch)'
abbrev-alias grbo='git rebase --onto'
abbrev-alias grbs='git rebase --skip'
abbrev-alias grev='git revert'
abbrev-alias grh='git reset'
abbrev-alias grhh='git reset --hard'
abbrev-alias groh='git reset origin/$(git_current_branch) --hard'
abbrev-alias grm='git rm'
abbrev-alias grmc='git rm --cached'
abbrev-alias grmv='git remote rename'
abbrev-alias grrm='git remote remove'
abbrev-alias grs='git restore'
abbrev-alias grset='git remote set-url'
abbrev-alias grss='git restore --source'
abbrev-alias grst='git restore --staged'
abbrev-alias grt='cd "$(git rev-parse --show-toplevel || echo .)"'
abbrev-alias gru='git reset --'
abbrev-alias grup='git remote update' # codespell:ignore
abbrev-alias grv='git remote -v'

abbrev-alias gsb='git status -sb'
abbrev-alias gsd='git svn dcommit'
abbrev-alias gsh='git show'
abbrev-alias gsbi='git submodule init'
abbrev-alias gsps='git show --pretty=short --show-signature'
abbrev-alias gsr='git svn rebase'
abbrev-alias gss='git status -s'
abbrev-alias gs='git status'
abbrev-alias gst='git status'
abbrev-alias gsu='git status -u'

abbrev-alias gstt='git stash'
abbrev-alias gsta='git stash push'
abbrev-alias gstaa='git stash apply'
abbrev-alias gstc='git stash clear'
abbrev-alias gstd='git stash drop'
abbrev-alias gstl='git stash list'
abbrev-alias gstp='git stash pop'
abbrev-alias gsts='git stash show --text'
abbrev-alias gstu='gsta --include-untracked'
abbrev-alias gstall='git stash --all'
abbrev-alias gsbu='git submodule update'
abbrev-alias gsbur='git submodule update --recursive --remote'
abbrev-alias gsw='git switch'
alias gsw-='git switch -'
abbrev-alias gswc='git switch -c'
abbrev-alias gswm='git switch $(git_main_branch)'
abbrev-alias gswd='git switch $(git_develop_branch)'

abbrev-alias gts='git tag -s'
abbrev-alias gtv='git tag | sort -V'
abbrev-alias gtl='gtl(){ git tag --sort=-v:refname -n -l "${1}*" }; noglob gtl'

abbrev-alias gunignore='git update-index --no-assume-unchanged'
abbrev-alias gunwip='git log -n 1 | grep -q -c "\-\-wip\-\-" && git reset HEAD~1'
abbrev-alias gup='git pull --rebase'
abbrev-alias gupv='git pull --rebase -v'
abbrev-alias gupa='git pull --rebase --autostash'
abbrev-alias gupav='git pull --rebase --autostash -v'
abbrev-alias glum='git pull upstream $(git_main_branch)'

abbrev-alias gam='git am'
abbrev-alias gamc='git am --continue'
abbrev-alias gams='git am --skip'
abbrev-alias gama='git am --abort'
abbrev-alias gamscp='git am --show-current-patch'

function grename() {
	if [[ -z "$1" || -z "$2" ]]; then
		echo "Usage: $0 old_branch new_branch"
		return 1
	fi

	# Rename branch locally
	git branch -m "$1" "$2"
	# Rename branch in origin remote
	if git push origin :"$1"; then
		git push --set-upstream origin "$2"
	fi
}
