#!/usr/bin/env bash
# called from yadm bootstrap when linux is detected
# uses yay to install from the AUR

declare -rx PACKAGE_LIST="${PACKAGE_DIR}/packages.txt"
declare -rx LINUX_PYTHON_PACKAGE_LIST="${PACKAGE_DIR}/linux_python3_packages.txt"

# Install yay if it isn't already installed
havecmd yay || {
	cd /tmp || exit 1
	git clone https://aur.archlinux.org/yay.git || exit 1
	cd yay || exit 1
	makepkg -si
}

# set zsh as shell
if ! echo "${SHELL}" | grep -q '/zsh'; then
	havecmd zsh || sudo pacman -S zsh
	sudo chsh -s "$(command -v zsh)" "$(whoami)"
	abort "Restart shell so that zsh environment is setup. Then re-run 'yadm bootstrap'"
else
	echo "zsh is already set as your default shell"
fi

# setup zsh files
echo 'Setting up zsh directory structure...'
# make sure original zsh files are removed
original_files=("${HOME}/.zshenv" "${HOME}/.zshrc" "${HOME}/.zsh_history" "${HOME}/.zprofile")

for file in "${original_files[@]}"; do
	rm -rf "${file}"
done

# so that zsh thinks its setup
# rest of my setup is done is ~/.profile
# which is sourced in lightdm
# see /etc/lightdm/Xsession
[[ -f "${HOME}/.zshenv" ]] || touch "${HOME}/.zshenv"

# install go, so I can install my package list parser
[[ $(yay -Q go) ]] || yay -S go
install_spkglist || exit $?

# yay/pacman to install packages from arch repos
echo "Checking ~/.config/yadm/packages.txt for any packages to install..."
# have to use for loop, while loop times out instantly
for lib in $(spkglist "${PACKAGE_LIST}"); do
	if [[ ! $(yay -Q "${lib}" 2>/dev/null) ]]; then # if package isn't installed
		yay -S "${lib}"
	fi
done

# install linux related python packages
havecmd python3 || exit $?
echo "Installing linux-specific python packages..."
python3 -m pip install -q --user -r "${LINUX_PYTHON_PACKAGE_LIST}"

# Install default rust toolchain and rust-clippy
echo "Instaling rust toolchain..."
rustup toolchain install stable
declare -a RUST_COMPONENTS=(clippy rustfmt rls rust-analysis rust-src)
for component in "${RUST_COMPONENTS[@]}"; do
	rustup component add "${component}"
done

# check if a systemd service is running
check_service() {
	local SERVICE_NAME
	local -a ADDITIONAL_FLAGS=()
	SERVICE_NAME="${1:?Must provide name of service}"
	shift
	while [[ -n "$1" ]]; do
		ADDITIONAL_FLAGS+=("$1")
		shift
	done
	echo "$SERVICE_NAME" "${ADDITIONAL_FLAGS[@]}"
	if [[ "$(systemctl "${ADDITIONAL_FLAGS[@]}" show -p SubState --value "${SERVICE_NAME}")" == "dead" ]]; then
		print_error "${SERVICE_NAME} is not running, you should enable it with: 'systemctl ${ADDITIONAL_FLAGS[@]} enable ${SERVICE_NAME} --now'"
	fi

}

# Check services
echo "Checking if default services are running..."
# CUPS and avahi are for printing
SERVICES=("NetworkManager" "avahi-daemon" "cups" "ntpd" "cronie" "paccache.timer" "atd" "pkgfile-update.timer")
for serv in "${SERVICES[@]}"; do
	check_service "${serv}"
done

# user services, dont start till my user logs in
USER_SERVICES=("emacs" "syncthing")
for serv in "${USER_SERVICES[@]}"; do
	check_service "${serv}" --user
done

# Setup mariadb by following: https://wiki.archlinux.org/index.php/MariaDB
# Check for manually installed binaries, installed at /usr/local/bin

# make symbolic links for proxying (ssh into server and youtube-dl/ffmpeg) media on my server
# see mediaproxy scripts here https://github.com/seanbreckenridge/vps
proxyscripts=("mediaproxyvideo" "mediaproxyaudio")
for script in "${proxyscripts[@]}"; do
	HAVECMD_REPORT='' havecmd "${script}" || {
		ln -s "${REPOS}/vps/${script}" ~/.local/bin
	}
done

# make sure https://github.com/seanbreckenridge/bgproc is running
# shellcheck disable=SC2009
ps -ef | grep "bgproc" | grep -q bash || print_error "bgproc isn't running!"
