#!/usr/bin/env bash
# yadm bootstrap script
# Uses yay to install from AUR

function print_error() {
	echo -e "$(tput setaf 1)$1$(tput sgr0)" 1>&2
}

function abort() {
	print_error "$1"
	exit 1
}

if [[ ! $(command -v yay) ]]; then
	abort "Could not find yay. Install that and re-run bootstrap\nExiting..."
fi

YADM_DIR="${HOME}/.config/yadm"
PACKAGE_LIST="${YADM_DIR}/packages.txt"
PYTHON_PACKAGE_LIST="${YADM_DIR}/python3_packages.txt"
GLOBAL_GEMFILE="${YADM_DIR}/Gemfile"
NODE_PACKAGE_LIST="${YADM_DIR}/global_node_packages.txt"
DART_PACKAGE_LIST="${YADM_DIR}/dart_packages.txt"

echo "Checking ~/.config/yadm/packages.txt for any packages to install..."
for lib in $(cat "$PACKAGE_LIST"); do
	if [[ ! $(yay -Q "${lib}") ]]; then # if package isn't installed
		read -p "Do you want to install '${lib}'? [Y/n] " -n 1 -r
		if [[ ! $REPLY =~ ^[Nn]$ ]]; then # REPLY is automatically used as read variable
			yay -S "${lib}"
		fi
	fi
done

if ! echo "$SHELL" | grep -q zsh; then
	if [[ ! "$(command -v zsh)" ]]; then
		sudo pacman -S zsh
	fi
	sudo chsh -s "$(command -v zsh)"
	abort "Restart shell so that zsh environment is setup. Then re-run 'yadm bootstrap'"
else
	echo "zsh is already set as your default shell"
fi

echo 'Setting up zsh directory structure...'
# make sure original oh-my-zsh files are removed
original_files=("${HOME}/.zshenv" "${HOME}/.zshrc" "${HOME}/.zsh_history" "${HOME}/.zprofile")

for file in "${original_files[@]}"; do
	if [[ -f "$file" ]]; then
		rm "$file"
	fi
done

# fix env/profile
# ZDOTDIR is located at ~/.config/zsh
if [[ ! -f "${HOME}/.zshenv" ]]; then
	ln "${HOME}/.config/zsh/.zshenv" "${HOME}/.zshenv"
fi
if [[ ! -f "${HOME}/.config/zsh/.zprofile" ]]; then
	ln "${HOME}/.profile" "${HOME}/.config/zsh/.zprofile"
fi

# make sure personal aliases file exists so that zshrc souces fine
[[ ! -f "${ZDOTDIR}/personal_aliases" ]] && touch "${ZDOTDIR}/personal_aliases"

# Setting up default user directories
default_user_dirs=("code" "Desktop" "Documents" "Documents/Notes" "Documents/wallpapers" "Downloads" "Desktop/Screenshots" "Pictures" ".local" ".cache" ".credentials" "gdrive")

for d_name in "${default_user_dirs[@]}"; do
	if [[ ! -d "${HOME}/${d_name}" ]]; then
		mkdir -p "${HOME}/${d_name}"
	fi
done

echo 'Checking git config...'
# check for global name config
if [[ -z $(git config --global user.name) ]]; then
	printf "No global name set. Enter full name: "
	read -r githubusername
	git config --global user.name "$githubusername"
fi

# check for global email config
if [[ -z $(git config --global user.email) ]]; then
	printf "No global email set. Enter email connected to your GitHub account: "
	read -r githubemail
	git config --global user.email "$githubemail"
fi

if [[ -z "$EDITOR" ]]; then
	git config --global core.editor nano
else
	git config --global core.editor nvim
fi

# Install python packages

echo "Installing global python site-packages..."
python3 -m pip install -q --user -r "$PYTHON_PACKAGE_LIST"

# Install personal python packages
# If command "$1" doesn't exist, install from $2
function install_python_personal() {
	[ ! "$(command -v "$1")" ] && python3 -m pip install --user "git+$2"
}
install_python_personal "rotten" "https://github.com/seanbreckenridge/rotten_tomatoes_cli"
install_python_personal "plus1" "https://github.com/seanbreckenridge/plus1"
install_python_personal "pythonanywhere_3_months" "https://github.com/seanbreckenridge/pythonanywhere-3-months"

# speedtest installs 2 executable scripts
# speedtest and speedtest-cli, which both have the same
# functionatly. This removes speedtest-cli to make
# tab completion nicer
[[ $(command -v speedtest-cli) ]] && rm "$(command -v speedtest-cli)"

NPM_CONFIG_PREFIX="${XDG_DATA_HOME:-$HOME/.local/share}/npm-packages"
echo "Installing global npm packages..."
[[ ! -d "${NPM_CONFIG_PREFIX}" ]] && mkdir -p "${NPM_CONFIG_PREFIX}" && sudo chown -R "$(whoami)" "${NPM_CONFIG_PREFIX}"
NPM_PACKAGE_LIST="$(npm list -g)"
while read -r npkg; do
	if ! grep -q "${npkg}" <<<"$NPM_PACKAGE_LIST"; then
		echo -e "Installing ${npkg}"
		npm install --global "${npkg}"
	fi
done <"$NODE_PACKAGE_LIST"

echo -e "Installing global gems..."
bundle config set system 'true' >/dev/null
bundle install --quiet --gemfile "$GLOBAL_GEMFILE" || print_error "Could not install gems. Retry by running: bundle config set system true && bundle --gemfile $GLOBAL_GEMFILE"

echo -e "Installing global dart packages..."
DART_INSTALLED_PACKAGES="$(pub global list | cut -d" " -f1)"
while read -r dartpkg; do
	if ! grep -q "$dartpkg" <<<"$DART_INSTALLED_PACKAGES"; then
		pub global activate "$dartpkg"
	fi
done <"$DART_PACKAGE_LIST"

# Install doom emacs
if [[ ! -d "$HOME/.emacs.d/" ]]; then
	git clone https://github.com/hlissner/doom-emacs "${HOME}/.emacs.d"
	"${HOME}/.emacs.d/bin/doom" install
	"${HOME}/.emacs.d/bin/doom" refresh
fi

# Check services
echo "Checking if default services are running..."
# CUPS and avahi are for printing
services=("NetworkManager" "avahi-daemon" "org.cups.cupsd" "cronie" "ntpd")
for serv in "${services[@]}"; do
	if ! systemctl show -p SubState --value "${serv}" | grep -q "running"; then
		print_error "${serv} is not running, you should enable it with: 'sudo systemctl enable ${serv}'"
	fi
done

if ! systemctl show -p SubState --value "mariadb" | grep -q "running"; then
	print_error "Setup mariadb by following: https://wiki.archlinux.org/index.php/MariaDB"
fi

# Check for manually installed binaries, installed at /usr/local/bin

echo "Checking for manually installed binaries..."
binaries=("wait-for-internet" "genpasswd" "shortcuts" "largechar" "st" "keyvol")
for binary in "${binaries[@]}"; do
	if [ ! "$(command -v "$binary")" ]; then
		print_error "Warning: Couldn't find ${binary}. Install it from https://github.com/seanbreckenridge/${binary}"
	fi
done

if [ "$(command -v shortcuts)" ]; then
	printf "Created %d shortcuts\n" "$(shortcuts create | wc -l)"
fi

dir-aliases
printf "Created %d directory aliases\n" "$(wc -l <"$ZDOTDIR/directory_aliases")"

echo "Installing nvim packages..."
nvim +PlugInstall +qall
