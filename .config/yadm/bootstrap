#!/bin/bash
# yadm bootstrap script
# Uses yay to install from AUR

function print_error() {
	echo -e "$(tput setaf 1)$1$(tput sgr0)" 1>&2
}

function abort() {
	print_error "$1"
	exit 1
}

# Install yay if it isn't already installed
if [[ ! $(command -v yay) ]]; then
	cd /tmp
	git clone https://aur.archlinux.org/yay.git
	cd yay
	makepkg -si
fi

YADM_DIR="${HOME}/.config/yadm"
PACKAGE_LIST="${YADM_DIR}/packages.txt"
PYTHON_PACKAGE_LIST="${YADM_DIR}/python3_packages.txt"
GLOBAL_GEM_LIST="${YADM_DIR}/ruby_packages.txt"
NODE_PACKAGE_LIST="${YADM_DIR}/node_packages.txt"
DART_PACKAGE_LIST="${YADM_DIR}/dart_packages.txt"
CARGO_PACKAGE_LIST="${YADM_DIR}/cargo_packages.txt"
GO_PACKAGE_LIST="${YADM_DIR}/go_packages.txt"
HASKELL_PACKAGE_LIST="${YADM_DIR}/haskell_packages.txt"

# yay/pacman to install packages from arch repos
echo "Checking ~/.config/yadm/packages.txt for any packages to install..."
# have to use for loop, while loop times out instantly
for lib in $(sed -e '/^\s*$/d' -e '/^#.*$/d' "${PACKAGE_LIST}"); do
	if [[ ! $(yay -Q "${lib}" 2>/dev/null) ]]; then # if package isn't installed
		yay -S "${lib}"
	fi
done

# set zsh as shell
if ! echo "$SHELL" | grep -q zsh; then
	if [[ ! "$(command -v zsh)" ]]; then
		sudo pacman -S zsh
	fi
	sudo chsh -s "$(command -v zsh)"
	abort "Restart shell so that zsh environment is setup. Then re-run 'yadm bootstrap'"
else
	echo "zsh is already set as your default shell"
fi

# setup zsh files
echo 'Setting up zsh directory structure...'
# make sure original zsh files are removed
original_files=("${HOME}/.zshenv" "${HOME}/.zshrc" "${HOME}/.zsh_history" "${HOME}/.zprofile")

for file in "${original_files[@]}"; do
	if [[ -f "$file" ]]; then
		rm "$file"
	fi
done

# so that zsh thinks its setup
# rest of my setup is done is ~/.xprofile
[ ! -f "${HOME}/.zshenv" ] && touch "${HOME}/.zshenv"

# make sure personal aliases file exists so that zshrc souces fine
[[ ! -f "${ZDOTDIR}/aliases/personal_aliases" ]] && touch "${ZDOTDIR}/aliases/personal_aliases"

# create default user directories
default_user_dirs=("code" "Desktop" "Documents" "Documents/Notes" "Documents/wallpapers" "Downloads" "Desktop/Screenshots" "Pictures" ".local" ".cache" ".credentials" "gdrive")
for d_name in "${default_user_dirs[@]}"; do
	if [[ ! -d "${HOME}/${d_name}" ]]; then
		mkdir -p "${HOME}/${d_name}"
	fi
done

echo 'Checking git config...'
# check for global name config
if [[ -z $(git config --global user.name) ]]; then
	printf "No global name set. Enter full name: "
	read -r githubusername
	git config --global user.name "$githubusername"
fi
# check for global email config
if [[ -z $(git config --global user.email) ]]; then
	printf "No global email set. Enter email connected to your GitHub account: "
	read -r githubemail
	git config --global user.email "$githubemail"
fi
# set editor to use as nvim
git config --global core.editor nvim

# Install python packages
echo "Installing global python site-packages..."
python3 -m pip install -q --user -r "$PYTHON_PACKAGE_LIST"

# Install personal python packages
# If command "$1" doesn't exist, install from $2
function install_python_personal() {
	[ ! "$(command -v "$1")" ] && python3 -m pip install --user "git+$2"
}
install_python_personal "plus1" "https://github.com/seanbreckenridge/plus1"
install_python_personal "pythonanywhere_3_months" "https://github.com/seanbreckenridge/pythonanywhere-3-months"

# speedtest installs 2 executable scripts
# speedtest and speedtest-cli, which both have the same
# functionatly. This removes speedtest-cli to make
# tab completion nicer
[[ $(command -v speedtest-cli) ]] && rm "$(command -v speedtest-cli)"

# install npm packages
NPM_CONFIG_PREFIX="${XDG_DATA_HOME}/npm-packages"
echo "Installing global npm packages..."
# create the npm directory and make sure we own the directory to fix permission issues
[[ ! -d "${NPM_CONFIG_PREFIX}" ]] && mkdir -p "${NPM_CONFIG_PREFIX}" && sudo chown -R "$(whoami)" "${NPM_CONFIG_PREFIX}"
# get a list of installed packages
NPM_PACKAGE_LIST="$(npm ls -g --json | jq '.dependencies | keys[]' -r)"
while read -r npkg; do
	if ! grep -q "^${npkg}$" <<<"$NPM_PACKAGE_LIST"; then
		printf "Installing %s\n" "$npkg"
		npm install --global "${npkg}"
	fi
done <"$NODE_PACKAGE_LIST"

echo "Installing global ruby packages..."
RUBY_GEMS_LIST="$(gem list | cut -d' ' -f1)"
while read -r rgem; do
	if ! grep -q "^${rgem}$" <<<"$RUBY_GEMS_LIST"; then
		printf "Installing %s\n" "$rgem"
		gem install "${rgem}"
	fi
done <"$GLOBAL_GEM_LIST"

echo "Installing global dart packages..."
DART_INSTALLED_PACKAGES="$(pub global list | cut -d" " -f1)"
while read -r dartpkg; do
	if ! grep -q "^$dartpkg$" <<<"$DART_INSTALLED_PACKAGES"; then
		printf "Installing %s\n" "$dartpkg"
		pub global activate "$dartpkg"
	fi
done <"$DART_PACKAGE_LIST"

echo "Installing global cargo packages..."
CARGO_INSTALLED_PACKAGES="$(cargo install --list | grep -v "^\s" | cut -d" " -f1)"
while read -r cargopkg; do
	if ! grep -q "^$cargopkg$" <<<"$CARGO_INSTALLED_PACKAGES"; then
		printf "Installing %s\n" "$cargopkg"
		cargo install "$cargopkg"
	fi
done <"$CARGO_PACKAGE_LIST"

# takes a line from "$GO_PACKAGE_LIST"
# binary -> package source
# and installs it if the binary isn't already on your path
function install_go_package() {
	[ ! "$(command -v "$1")" ] && go get -u -v "$2"
}

echo "Installing global go packages..."
while IFS= read -r go_line; do
  # purposefully dont use "$go_line", to split the line into two arguments
  # the name of the binary on the $PATH and the URL to install it from
	install_go_package $go_line
done <"$GO_PACKAGE_LIST"

echo "Installing global haskell packages..."
while read -r haskell_pkg; do
	if [ ! "$(command -v "$haskell_pkg")" ]; then
		stack install "$haskell_pkg"
	fi
done <"$HASKELL_PACKAGE_LIST"

# Install doom emacs
if [[ ! -d "$HOME/.emacs.d/" ]]; then
	git clone https://github.com/hlissner/doom-emacs "${HOME}/.emacs.d"
	"${HOME}/.emacs.d/bin/doom" install
	"${HOME}/.emacs.d/bin/doom" refresh
fi

# Check services
echo "Checking if default services are running..."
# CUPS and avahi are for printing
services=("NetworkManager" "avahi-daemon" "org.cups.cupsd" "cronie" "ntpd" "paccache.timer" "atd")
for serv in "${services[@]}"; do
	if [[ "$(systemctl show -p SubState --value "${serv}")" == "dead" ]]; then
		print_error "${serv} is not running, you should enable it with: 'sudo systemctl enable ${serv} --now'"
	fi
done

# Setup mariadb by following: https://wiki.archlinux.org/index.php/MariaDB

# Check for manually installed binaries, installed at /usr/local/bin

echo "Checking for manually installed binaries..."
binaries=("wait-for-internet" "genpasswd" "shortcuts" "largechar" "mpvf" "exists")
for binary in "${binaries[@]}"; do
	if [ ! "$(command -v "$binary")" ]; then
		print_error "Warning: Couldn't find ${binary}. Install it from https://github.com/seanbreckenridge/${binary}"
	fi
done

if [ "$(command -v shortcuts)" ]; then
	printf "Created %d shortcuts\n" "$(shortcuts create | wc -l)"
fi

dir-aliases
printf "Created %d directory aliases\n" "$(wc -l <"$ZDOTDIR/aliases/directory_aliases")"

echo "Installing nvim packages..."
nvim +PlugInstall +qall
