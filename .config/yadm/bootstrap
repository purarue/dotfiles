#!/usr/bin/env bash
# yadm bootstrap script
# Installs all my packages/sets up my environment.
#
# Checks for the presence of the $ON_OS variable,
# which is set in ~/.profile by checking `uname`
# on linux. Since the ~/.profile is sourced at the
# beginning of the Xsession and not when opening
# a shell, it can be assumed that its always set
# once `yadm clone` has been run and the computer
# has been restarted.

print_error() {
	notify -u critical "bootstrap error" "$1"
	printf '%s%s%s\n' "$(tput setaf 1)" "$1" "$(tput sgr0)" 1>&2
} && export -f print_error

abort() {
	print_error "$1"
	exit 1
} && export -f abort

# install my package list parser
install_spkglist() {
	havecmd go || return $?
	if ! havecmd spkglist; then
		go install -v 'github.com/seanbreckenridge/spkglist/cmd/spkglist@latest' || return $?
	fi
} && export -f install_spkglist

declare -rx YADM_DIR="${HOME}/.config/yadm"
declare -rx PACKAGE_DIR="${YADM_DIR}/package_lists"

# report errors if user doesn't have a command
export HAVECMD_REPORT=1

# make sure my $PATH is setup properly
havecmd havecmd || {
	# optionally let me continue - this may be the first time I'm running this
	# on android and I need to install zsh/setup defaults
	printf 'Continue anyways [Ctrl+C to Cancel] ?'
	read -r || exit $?
}

set -u
printf 'Running bootstrap for: %s\n' "${ON_OS}"
set +u

# dispatch on os type
case "$ON_OS" in
mac)
	bash "${YADM_DIR}/mac_bootstrap" || exit $?
	;;
linux)
	bash "${YADM_DIR}/linux_bootstrap" || exit $?
	;;
android)
	bash "${YADM_DIR}/android_bootstrap" || exit $?
	;;
windows)
	bash "${YADM_DIR}/windows_bootstrap" || exit $?
	;;
esac

declare -rx PYTHON_PACKAGE_LIST="${PACKAGE_DIR}/python3_packages.txt"
declare -rx SCIPYTHON_PACKAGE_LIST="${PACKAGE_DIR}/scientific_python.txt" # probably don't have to install on android
declare -rx GLOBAL_GEM_LIST="${PACKAGE_DIR}/ruby_packages.txt"
declare -rx NODE_PACKAGE_LIST="${PACKAGE_DIR}/node_packages.txt"
declare -rx DART_PACKAGE_LIST="${PACKAGE_DIR}/dart_packages.txt"
declare -rx CARGO_PACKAGE_LIST="${PACKAGE_DIR}/cargo_packages.txt"
declare -rx GO_PACKAGE_LIST="${PACKAGE_DIR}/go_packages.txt"
declare -rx HASKELL_PACKAGE_LIST="${PACKAGE_DIR}/haskell_packages.txt"
declare -rx MIX_PACKAGE_LIST="${PACKAGE_DIR}/mix_archive_packages.txt"

declare SCRIPT_TARGET_DIR="${HOME}/.local/bin" # should be created by stack/python

# make sure personal aliases file exists so that zshrc souces fine
[[ ! -f "${ZDOTDIR}/aliases/personal_aliases" ]] && touch "${ZDOTDIR}/aliases/personal_aliases"

# data directory for https://github.com/seanbreckenridge/HPI
[[ -n "${HPIDATA}" && ! -d "${HPIDATA}" ]] && mkdir -p "${HPIDATA}"

havecmd git || exit $?
echo 'Checking git config...'
# check for global name config
if [[ -z $(git config --global user.name) ]]; then
	printf "No global name set. Enter full name: "
	read -r githubusername
	git config --global user.name "${githubusername}"
fi
# check for global email config
if [[ -z $(git config --global user.email) ]]; then
	printf "No global email set. Enter email connected to your GitHub account: "
	read -r githubemail
	git config --global user.email "${githubemail}"
fi
# set editor to use as nvim
git config --global core.editor nvim
# specify how to handle divergent branches
git config --global pull.rebase false
# set default branch to silence warning message
git config --global init.defaultBranch 'master'
# set similar configuration for yadm itself
yadm gitconfig core.editor nvim
yadm gitconfig pull.rebase false

# set the hooks directory
yadm gitconfig core.hooksPath "${HOME}/.config/yadm/hooks"

havecmd python3 || exit $?
# Install python packages -- even when on android, I use this enough/do
# enough scripting here that its worth it
echo "Installing global python site-packages..."
# upgrade pip
python3 -m pip install --user -U pip
# install wheel
python3 -m pip list --format=freeze | cut -d "=" -f1 | grep -q "^wheel$" || python3 -m pip install --user wheel
python3 -m pip install --user -q -r "${PYTHON_PACKAGE_LIST}"

# Install personal python packages
# If command "$1" doesn't exist, install from $2
function install_python_personal() {
	havecmd "${1}" || python3 -m pip install --user "git+${2}"
} && export -f install_python_personal

install_python_personal "rotten" "https://github.com/seanbreckenridge/rotten_tomatoes_cli"
install_python_personal "mystars" "https://github.com/seanbreckenridge/oh-my-stars"
install_python_personal "shortcuts" "https://github.com/seanbreckenridge/shortcuts"

# speedtest installs 2 executable scripts
# speedtest and speedtest-cli, which both have the same
# functionatly. This removes speedtest-cli to make
# tab completion nicer
HAVECMD_REPORT='' havecmd speedtest-cli && rm "$(command -v speedtest-cli)"

echo 'Installing coc extensions...'
COC_NPM_DIR="${HOME}/.config/coc/extensions/"
havecmd npm && [[ -e "${COC_NPM_DIR}" ]] && {
	(cd "${COC_NPM_DIR}" && npm install)
}

if [[ "$ON_OS" != 'android' ]]; then
	bash "${YADM_DIR}/computer_bootstrap" || exit $?
fi

# install pistol manually
havecmd pistol || env GO111MODULE=on go install -v 'github.com/doronbehar/pistol/cmd/pistol@latest'

echo "Installing personal tools/scripts..."

# install git-only cargo repos
havecmd "wait-for-internet" || cargo install --git "https://github.com/seanbreckenridge/wait-for-internet"

# build individual applications
# clone from second argument (git), cd and run 'make' to install something
# third argument is passed to make if provided
make_compatible_build() {
	local TEMP_INSTALL_DIR
	havecmd "${1}" || {
		printf "Installing %s from %s\n" "${1}" "${2}"
		BUILD_DIR="$(mktemp -p "${TMPDIR:-/tmp}" -d XXXXXXXXXX)"
		cd "${BUILD_DIR}" || return $?
		git clone "${2}" || return $?
		CLONED="$(command ls -1)" || return $?
		cd "${CLONED}" || return $?
		if [[ -n "${3}" ]]; then
			make "${3}" || return $?
		else
			make || return $?
		fi
	}
}

set -e
make_compatible_build tttlog 'https://github.com/seanbreckenridge/ttt'
make_compatible_build exists 'https://github.com/seanbreckenridge/exists' install
make_compatible_build genpasswd 'https://github.com/seanbreckenridge/genpasswd' install
make_compatible_build mpv-currently-playing 'https://github.com/seanbreckenridge/mpv-sockets'
set +e

install_shell_script() {
	local TEMP_INSTALL_DIR
	havecmd "$1" || {
		printf "Installing %s from %s\n" "$1" "$2"
		TEMP_INSTALL_DIR="$(mktemp -p "${TMPDIR:-/tmp}" -d XXXXXXXXXX)" # create temporary directory
		cd "${TEMP_INSTALL_DIR}" || return $?                           # switch to directory
		wget "${2}" -O "./${1}" || return $?                            # download to script name
		chmod +x "./${1}" || return $?                                  # make executable
		mv "./${1}" "${SCRIPT_TARGET_DIR}"                              # move to bin directory (~/.local/bin)
	}
}

# install some of my individual shell scripts
set -e
ls "${SCRIPT_TARGET_DIR}" >/dev/null # make sure target directory exists
install_shell_script mpvf 'https://raw.githubusercontent.com/seanbreckenridge/mpvf/master/mpvf'
install_shell_script bgproc 'https://raw.githubusercontent.com/seanbreckenridge/bgproc/master/bgproc'
install_shell_script tts 'https://raw.githubusercontent.com/seanbreckenridge/tts/master/tts'
install_shell_script plainplay 'https://raw.githubusercontent.com/seanbreckenridge/plaintext-playlist/master/plainplay'
install_shell_script resolve_cmd_plainplay 'https://raw.githubusercontent.com/seanbreckenridge/plaintext-playlist/master/resolve_cmd_plainplay'
install_shell_script pmark 'https://raw.githubusercontent.com/seanbreckenridge/pmark/master/pmark'
install_shell_script bookmark 'https://raw.githubusercontent.com/seanbreckenridge/bookmark.txt/master/bookmark'
install_shell_script frinkconv 'https://raw.githubusercontent.com/seanbreckenridge/frinkconv/master/frinkconv'
set +e

if havecmd reshortcuts; then
	reshortcuts # shortcuts create and format all the created files
else
	printf "Created %d shortcuts\n" "$(python3 -m shortcuts create --debug | wc -l)"
fi

# link tmux config -- seems this fails on termux (android)?
[[ ! -e "${HOME}/.tmux.conf" ]] && ln "${HOME}/.config/tmux.conf" "${HOME}/.tmux.conf"

# setup directory for ranger
dir-aliases-ranger

# setup nvim packages
havecmd nvim || exit $?
echo "Installing nvim packages..."
nvim +PlugInstall +qall

echo "Finished bootstrapping!"
