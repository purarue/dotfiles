# This file is converted by https://github.com/seanbreckenridge/shortcuts
# into standalone shell scripts

# default_shebang = "#!/bin/sh"
# default_mode = "0755"

[list-config]
command='''
{ cd && yadm ls-files | sed "s#^#$HOME/#"; fd --type=file -H --full-path "${HOME}" "${XDG_CONFIG_HOME}/todo" "${ZDOTDIR}" } | grep -v "system-config" | exists | sort -u
'''
shebang = "#!/usr/bin/env zsh"

# fuzzy match list-config names, open one to edit (Edit Config)
[ec]
command = '''list-config | sed "s#^$HOME/##g" | fzf +m -q "$*" | xargs -r -I {} editor -n "$HOME/{}"'''

# restart the emacs server managed by systemd
[restart-emacs]
command = """
if systemctl --user restart emacs; then
    notify-send "restarted emacs server"
else
    notify-send -u "critical" "couldn't restart emacs server"
fi
"""

# open a terminal, run doom refresh, and restart the emacs daemon
[refresh-doom]
command = '''
launch "doom refresh && restart-emacs"
'''

# open the dotfiles git repository
[dotfiles]
command = '''yadm gitconfig --get remote.origin.url | /usr/bin/python3 -c "from giturlparse import parse; print(parse(input()).urls[\"https\"])" | openurl'''

# print i3 bindings
# ignore volume and brightness bindings
[i3binds]
command='''sed 's/^bindsym --release/bindsym/g' "${HOME}/.config/i3/config" | awk '/^bindsym/ {$1=""; print substr($0, 2, 9999)}' | grep -Ev "pactl|brightness"'''

# prompt i3 bindings w/ rofi and run one of the commands
[i3binds-prompt]
command='''i3-msg "$(i3binds | rofi -dmenu -width 50 -lines 30 -location 5 -p "Pick a command to run > " | sed 's/--no-startup-id //g' | cut -d" " -f 2-)"'''

# reload firefox
[reload-browser]
command='xdotool search --class "Firefox" key --window %@ "ctrl+r"'

# print the date in the us format
[usdate]
command = 'date "+%m/%d/%y"'

# print current git configuration
[gitcfg]
command = "git config --list | cat"
link = "gitconfig"

# generate a good ssh key
[good-ssh-keygen]
command = 'ssh-keygen -t rsa -b 4096 -o -a 100'
link = "ssh-keygen-good"  # so that it autocompletes from ssh-keygen

# get gitignores for different languages
[gi]
command = '''
if [ ! "$( echo "$@" | tr -d "\n\r" )" = "" ] && [ ! "$1" = "list" ]; then
  printf "tags*\n"
fi
curl -sL "https://gitignore.io/api/$*"
printf "\n"
'''

# wait for internet connection and ping me
[wfi]
command='wait-for-internet && notify-send "INTERNET" && paplay /usr/share/sounds/freedesktop/stereo/message.oga'

# prompts the user for input with a basic rofi input prompt
# additional options can be given after rofi-input
[rofi-input]
command = '''rofi -dmenu -theme-str 'listview {enabled: false;}' "$@"'''

# searches trakt/letterboxd for a movie
[moviesearch]
command = '''
SEARCH_STR=$(rofi-input -location 2 -p "Search for a movie > " | awk '{$1=$1; print}' | tr " " "+")  # awk removes leading/trailing spaces
[ -z "$SEARCH_STR" ] && exit 1
openurl "https://trakt.tv/search/movies?query=${SEARCH_STR}&utf8=%E2%9C%93"
openurl "https://letterboxd.com/search/films/${SEARCH_STR}"
'''

# searches trakt for a tv show
[tvsearch]
command = '''
SEARCH_STR=$(rofi-input -location 2 -p "Search for a TV show > " | awk '{$1=$1; print}' | tr " " "+")
[ -z "$SEARCH_STR" ] && exit 1
openurl "https://trakt.tv/search/shows?query=${SEARCH_STR}&utf8=%E2%9C%93"
'''

# generates a password and puts it on your clipboard
# uses https://github.com/seanbreckenridge/genpasswd
[genpass]
shebang = "#!/usr/bin/env bash"  # to make sure echo flags work
command = '''
pw=$(genpasswd "$@" | head -n 1)
if [ "$(tty)" = "not a tty" ]; then
  notify-send "${pw}"
else
 echo -e "$pw"
fi
# copy to clipboard
echo -en "$pw" | xclip -selection clipboard -r
'''

[list-music]
command='fd --type f -E "*jpg" -E "*png" -E "*CUE" -E "*cue" -E "*log" -E "*m3u" -E "*m3u8"'

# play music in the current directory, recursively
[play-music]
command='list-music | mpv --playlist=- --no-audio-display'


# Plays songs from this folder, recursively, randomly
[shuffle-music]
command='list-music | shuf | mpv --playlist=- --no-audio-display'

# call shfmt in place
[shfmt-in-place]
command='''
[ -z "$1" ] && echo "Error: must provide a file to call shfmt on." && exit 1
for f in "$@"; do
  shfmt "$f" > /tmp/shfmt-temp && cat /tmp/shfmt-temp > "$f"
done
'''

[stream-link]
command = """
# grab URL from clipboard and play in a new terminal with mpvf
if ! CLIPBOARD_CONTENTS="$(xclip -out -selection clipboard)"; then
  notify-send "Failed to get clipboard contents." && exit 1
fi
mpvf "${CLIPBOARD_CONTENTS}"
"""

[screenshot-to-imgur]
command='''
FILENAME="$(ls -t ~/Desktop/Screenshots/*.png | head -n1)"
imgur-uploader "$FILENAME"
IMGUR_URL="$(xclip -out -selection clipboard)"
printf "%s\n" "$IMGUR_URL" >> /tmp/imgur_urls.log
notify-send "$IMGUR_URL"
'''

# open chatterino and use mpv to stream from twitch
[twitch]
command = '''
[ -z "$1" ] && echo "Pass the twitch user to stream from as the first argument." && exit 1
pgrep -x chatterino >/dev/null || chatterino &
mpvf "https://www.twitch.tv/${1}"
'''

[clipedit]
command = '''
# edit your clipboard in vim
xclip -out -selection clipboard | vipe | xclip -in -selection clipboard
'''
link = 'edit-clipboard'

[symlink]
command="""
# from https://gitlab.com/rwxrob/configgroup/mint/-/tree/master/bin
symlink () {
  from="$1"
  to="$2"
  if [ -z "$from" -o -z "$to" ]; then
    echo 'symlink <from> <to>'
    return 1
  fi
  echo Linking $from'` -> `'$to
  ln -fs $to $from
}

symlink $*
"""
shebang = '#!/bin/bash'

# override the lynx binary by
# placing the lynx shortcut
# on $PATH first
[lynx]
command = '/usr/bin/lynx -accept_all_cookies -cfg="${XDG_CONFIG_HOME}/lynx/lynx.cfg" "$@"'

# open the printer interface in the browser
[printer-server]
command = '''
# open the printer interface in the browser
PRINTER_PORT=$(sudo cat /etc/cups/cupsd.conf | grep -i "Listen localhost" | cut -d":" -f2)
printf "localhost:%d" "$PRINTER_PORT" | openurl
'''

[drive-mount]
command= '''
# start the ldm (light device mounter) daemon, to mount devices
echo "use lsblk -f to view disk IDs"
exec sudo ldm -u $(whoami)
'''

[ipinfo]
# get my ip information
command='''
curl --silent ipinfo.io | sed -e "s/^[{}]//" -e "s/^\s*//" -e "s/,$//" -e "s/\"//g" -e "/^\s*$/d"
'''

# send a notification with qtile launcher keybindings
[qtile-notify-bindings]
command='''
notify-send -t 10000 "$(qtile-bindings --json | jq -r '[.[]|select(.modifier=="control, mod4")] | .[] | "\(.keysym) | \(.command)"' | sed -e "s/spawn('//" -e "s/')$//" -e "s/launch //" -e "s/-developer-edition//" -e "/qtile-notify-bindings/d")"
'''

[webcam-test]
command='''mpv /dev/video0'''

[geolocate]
command='''
if [ -z "$1" ]; then
  echo "provide ip address to geolocate as the first argument" 2>&1
  exit 1
fi
curl --silent "https://ipvigilante.com/$1" | jq '.data | "\(.country_name), \(.subdivision_1_name), \(.subdivision_2_name) (\(.latitude), \(.longitude))"'
'''

[preview]
command='''
browser-sync start \
  --no-notify --no-ui \
  --ignore '**/.*' \
  -sw
'''
