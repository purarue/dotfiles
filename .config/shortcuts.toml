# This file is converted by https://github.com/seanbreckenridge/shortcuts
# into standalone shell scripts

# default_shebang = "#!/bin/sh"
# default_mode = "0755"

[list-config]
command='''
# list all of my configuration files, by matching combining
# yadm ls-files and a couple search commands
{ cd && yadm ls-files | sed "s#^#$HOME/#"; fd --type=file -H --full-path "${HOME}" "${XDG_CONFIG_HOME}/todo" "${ZDOTDIR}" } | grep -v "system-config" | exists | sort -u
'''
shebang = "#!/bin/zsh"

[ec]
command = '''
# fuzzy match list-config names, open one to edit (Edit Config)
list-config | sed "s#^$HOME/##g" | fzf +m -q "$*" | xargs -r -I {} editor "$HOME/{}"'''

[restart-emacs]
command = """
# restart the emacs server managed by systemd
if systemctl --user restart emacs; then
	notify-send "restarted emacs server"
else
	notify-send -u "critical" "couldn't restart emacs server"
fi
"""

[refresh-doom]
command = '''
# open a terminal, run doom sync, and restart the emacs daemon
launch "doom sync && restart-emacs"
'''

[dotfiles]
command = '''
# open the dotfiles git repository
yadm gitconfig --get remote.origin.url | /usr/bin/python3 -c "from giturlparse import parse; print(parse(input()).urls[\"https\"])" | openurl'''

[i3binds]
command='''
# print i3 bindings
# ignore volume and brightness bindings
sed 's/^bindsym --release/bindsym/g' "${HOME}/.config/i3/config" | awk '/^bindsym/ {$1=""; print substr($0, 2, 9999)}' | grep -Ev "pactl|brightness"'''

[i3binds-prompt]
command='''
# prompt i3 bindings w/ rofi and run one of the commands
i3-msg "$(i3binds | rofi -dmenu -width 50 -lines 30 -location 5 -p "Pick a command to run > " | sed 's/--no-startup-id //g' | cut -d" " -f 2-)"'''

[reload-browser]
command='''
# reload firefox
xdotool search --class "Firefox" key --window %@ "ctrl+r"
'''

[usdate]
command = '''
# print the date in the us format
date "+%m/%d/%y"
'''

[gitconfig]
command = '''
# print the current git configuration
git config --list | cat
'''

[gi]
command = '''
# get gitignores for different languages
if [ ! "$(echo "$@" | tr -d "\n\r")" = "" ] && [ ! "$1" = "list" ]; then
	printf "tags*\n"
fi
curl -sL "https://gitignore.io/api/$*"
printf "\n"
'''

[wfi]
command='''
# wait for internet connection and ping me
wait-for-internet && notify-send "INTERNET" && paplay /usr/share/sounds/freedesktop/stereo/message.oga
'''

[wfib]
command='''
# wfi, and then reload the browser
wfi; reload-browser
'''

[rofi-input]
command = '''
# prompts the user for input with a basic rofi input prompt
# additional options can be given after rofi-input
rofi -dmenu -theme-str 'listview {enabled: false;}' "$@"
'''

[moviesearch]
command = '''
# searches trakt/letterboxd for a movie
SEARCH_STR=$(rofi-input -location 2 -p "Search for a movie > " | awk '{$1=$1; print}' | tr " " "+") # awk removes leading/trailing spaces
[ -z "$SEARCH_STR" ] && exit 1
openurl "https://trakt.tv/search/movies?query=${SEARCH_STR}&utf8=%E2%9C%93"
openurl "https://letterboxd.com/search/films/${SEARCH_STR}"
'''

[tvsearch]
command = '''
# searches trakt for a tv show
SEARCH_STR=$(rofi-input -location 2 -p "Search for a TV show > " | awk '{$1=$1; print}' | tr " " "+")
[ -z "$SEARCH_STR" ] && exit 1
openurl "https://trakt.tv/search/shows?query=${SEARCH_STR}&utf8=%E2%9C%93"
'''

[mediasearch]
command = '''
if SELECTED=$(printf "moviesearch\ntvsearch" | rofi -dmenu -location 2 -lines 2 -p "Search Media Type > "); then
	"$SELECTED"
fi
'''

[genpass]
shebang = "#!/bin/bash"  # to make sure echo flags work
command ='''
# generates a password and puts it on your clipboard
# uses https://github.com/seanbreckenridge/genpasswd
if ! pw=$(genpasswd "$@"); then
	echo "$pw"
	exit 0
fi
pw=$(head -n 1 <<<"$pw")
if [[ "$(tty)" == "not a tty" ]]; then
	notify-send "Copied password to clipboard:" "${pw}"
else
	echo -e "$pw"
fi
# copy to clipboard
echo -en "$pw" | xclip -selection clipboard -r
'''

# confirm this is ignoring the correct files by running:
# list-music | grep -Ev "(mp3|flac|ogg|m4a)$"
[list-music]
command='''
# list music files (try to ignore cue/log/album artwork files) in the current directory
fd --type f | grep -iEv "\.(jpg|png|cue|log|m3u|m3u8|nfo|md5|txt|jpeg|sfv|pdf)$"
'''

[play-music]
command='''
# play music in the current directory, recursively
list-music | mpv --playlist=- --no-audio-display
'''


[shuffle-music]
command='''
# Plays songs from this folder, recursively, randomly
list-music | shuf | mpv --playlist=- --no-audio-display
'''

[shfmt-in-place]
command='''
# call shfmt on multiple files
[ -z "$1" ] && echo "Error: must provide a file to call shfmt on." && exit 1
for f in "$@"; do
	shfmt "$f" >/tmp/shfmt-temp && cat /tmp/shfmt-temp >"$f"
done
'''

[stream-link]
command = """
# grab URL from clipboard and play in a new terminal with mpvf
if ! CLIPBOARD_CONTENTS="$(xclip -out -selection clipboard)"; then
	notify-send "Failed to get clipboard contents." && exit 1
fi
export MPVF_PICKER=rofi
notify-send "Starting stream..." "${CLIPBOARD_CONTENTS}"
if ! mpvf "${CLIPBOARD_CONTENTS}"; then
	notify-send "Streaming Error:" "Couldn't stream from ${CLIPBOARD_CONTENTS}" && exit 1
fi
"""

[screenshot-to-imgur]
command='''
# uploads the most recent screenshot from
# ~/Pictures/Screenshots to imgur
FILENAME="$(newest "${SCREENSHOTS:?No SCREENSHOTS environment variable set}")" || exit 1
imgur-uploader "$FILENAME"
IMGUR_URL="$(xclip -out -selection clipboard)"
printf "%s\n" "$IMGUR_URL" >>/tmp/imgur_urls.log
notify-send "Uploaded Image to Imgur:" "$IMGUR_URL"
'''

[twitch]
command = '''
# open chatterino and use mpv to stream from twitch
STREAMER="${1:?Pass the twitch user to stream from as the first argument.}"
export MPVF_PICKER=rofi
pgrep -x chatterino >/dev/null || chatterino &
setsid mpvf "https://www.twitch.tv/${STREAMER}" &
'''

[clipedit]
command = '''
# edit your clipboard in vim
clippaste | vipe | clipcopy
'''
link = 'edit-clipboard'

[lynx]
command = '''
# override the lynx binary by
# placing the lynx shortcut
# on $PATH first
/usr/bin/lynx -accept_all_cookies -cfg="${XDG_CONFIG_HOME}/lynx/lynx.cfg" "$@"
'''

[ranger]
command='''
# override the ranger binary by
# placing the ranger shortcut
# on $PATH first
# this is to ignore Pillow image
# warnings like:
# https://i.imgur.com/Ky6NhKm.png
PYTHONWARNINGS="ignore" /usr/bin/ranger "$@"
'''

[printer-server]
command = '''
# open the printer interface in the browser
PRINTER_PORT=$(sudo cat /etc/cups/cupsd.conf | grep -i "Listen localhost" | cut -d":" -f2)
printf "localhost:%d" "$PRINTER_PORT" | openurl
'''

[drive-mount]
command= '''
# start the ldm (light device mounter) daemon, to mount devices
echo "use lsblk -f to view disk IDs"
exec sudo ldm -u "$(whoami)"
'''

[ipinfo]
command='''
# get my ip information
curl -s ipinfo.io | jq -r 'to_entries[] | "\(.key): \(.value)"'
'''

[qtile-notify-bindings]
command='''
# send a notification with qtile launcher keybindings
notify-send -t 10000 "qtile bindings:" "$(qtile-bindings --json | jq -r '[.[]|select(.modifier=="control, mod4")] | .[] | "\(.keysym) | \(.command)"' | sed -e "s/spawn('//" -e "s/')$//" -e "s/launch //" -e "s/-developer-edition//" -e "/qtile-notify-bindings/d")"
'''

[webcam-test]
command='''mpv /dev/video0'''

[geolocate]
command='''
IP_ADDR="${1:?provide ip address to geolocate as the first argument}"
curl --silent "https://ipvigilante.com/${IP_ADDR}" | jq '.data | "\(.country_name), \(.subdivision_1_name), \(.subdivision_2_name) (\(.latitude), \(.longitude))"'
'''

[image-dimensions]
command='''
#!/bin/sh
# print the image dimensions for one or more images
for f in "$@"; do
	img_size="$(exiftool "$f" | grep "Image Size")"
	[ -z "$img_size" ] && printf "Could not get 'Image Size' for %s" "$f" 1>&2 || printf "%s %s\n" "${img_size#*: }" "$f"
done
'''

[remove-extension]
command='''
# remove the extension from a filename
FILEPATH="${1:?You must provide a filepath to remove the extension for.}"
echo "${FILEPATH%%.*}"
'''

[replace-extension]
command='''
# replace the extension for a filename
FILEPATH="${1:?Have to provide a filepath to replace the extension for}"
REPLACE_EXTENSION="${2:?Must provide extension to replace extension with}"
echo "${FILEPATH%%.*}.${REPLACE_EXTENSION#.}"
'''

[to-png]
command='''
# convert an image to png
FILEPATH=${1:?Must provide image to convert}
convert "$FILEPATH" "$(replace-extension "$FILEPATH" png)"
'''

[to-icon]
command='''
# convert an image to a 16x16 icon - to favicon size
FILEPATH=${1:?Must provide image to convert}
NEW_FILEPATH="$(remove-extension "$FILEPATH")-icon.png"
convert -resize x16 -gravity center -crop 16x16+0+0 -flatten -colors 256 "$FILEPATH" "$NEW_FILEPATH"
'''

[file-mime]
command='''
# get mime type for one or more files
# this is the same as what rifle (ranger) does
file --mime-type -Lb "$@"
'''

[dragon-sink]
command='''
# brings up a prompt to drag files into.
# If no flags are provided, copies any files
# dragged into the prompt into the current directory.
# if the --mv flag is provided, moves files instead
declare cmd drg files
[[ "$1" = "--mv" ]] && cmd="mv" || cmd="cp"
drg="$(command -v dragon-drag-and-drop)" || drg="$(command -v dragon)" || {
	echo "couldnt find the dragon-drag-and-drop or dragon command"
	exit 1
}
files="$("$drg" --target --and-exit)"
[[ -z "$files" ]] && exit 1
while IFS= read -r f; do
	path="${f#file://}"
	$cmd -v "${path}" "$(pwd)/$(basename "${path}")"
done <<<"$files"
'''
shebang="#!/bin/bash"

# shorthand for sending lines from vim to pastebin
[vix]
command='ix -v'

# lots of date shorthands

[tstamp]
command="date +'%Y%m%d%H%M%S'"

[now]
command='date +"%A, %B %e, %Y, %l:%M:%S%p"'

[epoch]
command='date +"%s"'

[weekday]
command='date +"%A" | lower'

[month]
command='date +"%B" | lower'

[year]
command='date +"%Y"'

[lower]
command="tr '[:upper:]' '[:lower:]'"

[upper]
command="tr '[:lower:]' '[:upper:]'"

[capitalize]
command="""
# capitalizes the first character of a word from STDIN
s="$(lower)"
echo "$(upper <<<"${s:0:1}")${s:1}"
"""
shebang="#!/bin/bash"

[newest]
command='''
# gets the most recently modified file
# from a directory
IFS=$'\n'
f=($(ls -1 --color=never -trd ${1:-.}/*)) || exit 1
echo "${f[-1]}"
'''
shebang="#!/bin/bash"

[lastpic]
command='newest "${SCREENSHOTS:?No SCREENSHOTS environment variable set}" || exit 1'

[previewlastpic]
command='lastpic | sxiv - || exit 1'
link="lastpicpreview"

[urlpic]
command='''
# preview a picture from a URL
rm -rf /tmp/urlpic
mkdir -p /tmp/urlpic && cd /tmp/urlpic || exit 1
wget -q "${1:?Must provide a image URL to preview}"
newest | sxiv - || exit 1
'''
link="preivewurlpic"

[lastdown]
command='newest "${DOWNLOADS:?No DOWNLOADS environment variable set}" || exit 1'

[mvlast]
command='''
FILE="$(lastdown)" || exit 1
mv -v "${FILE}" "./$1"
'''

[mvlastpic]
command='''
FILE="$(lastpic)" || exit 1
mv -v "${FILE}" "./$1"
'''

[rbg]
command="echo -n $'\033[38;2;'$1';'$2';'$3'm'"
shebang="#!/bin/bash"

[rbgb]
command="echo -n $'\033[48;2;'$1';'$2';'$3'm'"
shebang="#!/bin/bash"

[vic]
command='nvim "$(which "${1:?No Executable provided}")"'

[mpv-get-property]
command='''
# See https://stackoverflow.com/a/62582595/9348376
PROPERTY="${1:?Pass property to get from currently running mpv instance. Run mpv --list-properties to get a list}"
MPV_RESP="$(printf '{ "command": ["get_property", "%s"] }\n' "$PROPERTY" | socat - "${MPV_SOCKET:-/tmp/mpvsocket}")" || exit $?
err="$(echo "$MPV_RESP" | jq -r '.error')"
[ "$err" = "success" ] || {
  echo "Error: ${err}" 1>&2
  exit 1
}
echo "$MPV_RESP" | jq -r '.data'
'''
