# This file is converted by https://github.com/seanbreckenridge/shortcuts
# into standalone shell scripts
default_shebang = "#!/bin/sh"

# default_mode = "0755"
[list-config]
shebang = "#!/bin/zsh"
command = '''
# list all of my configuration files, by matching combining
# yadm ls-files and a couple search commands
{
	cd && yadm ls-files | sed "s#^#$HOME/#"
	fd --type=file -H --full-path "${HOME}" "${XDG_CONFIG_HOME}/todo" "${ZDOTDIR}" "${XDG_CONFIG_HOME}/yadm" -E "repo.git"
} | grep -v "system-config" | exists | sort -u
'''

[ec]
command = '''
# fuzzy match list-config names, open one to edit (Edit Config)
list-config | sed "s#^$HOME/##g" | fzf +m -q "$*" | xargs -r -I {} editor "$HOME/{}"
'''

[restart-emacs]
command = """
# restart the emacs server managed by systemd
if systemctl --user restart emacs; then
	notify "restarted emacs server"
else
	notify "couldn't restart emacs server"
fi
"""

[refresh-doom]
command = '''
# open a terminal, run doom sync, and restart the emacs daemon
launch "doom sync && restart-emacs"
'''

[dotfiles]
command = '''
# open the dotfiles git repository
cd "${HOME}/.config/yadm/repo.git" || exit 1
exec gitopen
'''

[dotfiles-github]
command='''
cd "${HOME}/.config/yadm/repo.git" || exit 1
exec githubopen
'''

[i3binds]
command='''
# print i3 bindings
# ignore volume and brightness bindings
sed 's/^bindsym --release/bindsym/g' "${HOME}/.config/i3/config" | awk '/^bindsym/ {$1=""; print substr($0, 2)}'
'''

[i3binds-prompt]
command='''
# prompt i3 bindings w/ rofi and run one of the commands
i3-msg "$(i3binds | rofi -dmenu -width 50 -lines 30 -location 5 -p "Pick a command to run > " | sed 's/--no-startup-id //g' | cut -d" " -f 2-)"'''

[reload-browser]
command='''
# reload firefox (Navigator is firefox's WM_CLASS)
# the i is to enter insert mode in firefox (I use vimium)
# \C is control, r is r, to refresh
exec xvkbd -window Navigator -text "i\Cr"
'''

[usdate]
command = '''
# print the date in the us format
date "+%m/%d/%y"
'''

[gi]
command = '''
# get gitignores for different languages
if [ ! "$(echo "$@" | tr -d "\n\r")" = "" ] && [ ! "$1" = "list" ]; then
	printf "tags*\n*.pdf\n"
fi
curl -sL "https://gitignore.io/api/$*"
printf "\n"
'''

[wfi]
command='''
#!/bin/sh
# wait for internet connection and ping me
command -v tttlog >/dev/null 2>&1 && tttlog "$(basename "$0")"
wait-for-internet "$@" && {
	notify "INTERNET"
	playping
}
'''

[wfib]
command='''
# wfi, and then reload the browser
wfi
exec reload-browser
'''

[moviesearch-trakt]
command = '''
# searches trakt for a movie
[ -z "$SEARCH_STR" ] && SEARCH_STR=$(input-dialog "Search for a movie > " | chomp | tr " " "+")
[ -z "$SEARCH_STR" ] && exit 1
command -v tttlog >/dev/null 2>&1 && tttlog "$(basename "$0") $SEARCH_STR"
openurl "https://trakt.tv/search/movies?query=${SEARCH_STR}&utf8=%E2%9C%93"
'''

[moviesearch-letterboxd]
command = '''
# searches letterboxd for a movie
[ -z "$SEARCH_STR" ] && SEARCH_STR=$(input-dialog "Search for a movie > " | chomp | tr " " "+")
[ -z "$SEARCH_STR" ] && exit 1
command -v tttlog >/dev/null 2>&1 && tttlog "$(basename "$0") $SEARCH_STR"
openurl "https://letterboxd.com/search/films/${SEARCH_STR}"
'''

[moviesearch]
command = '''
# searches trakt/letterboxd for a movie
SEARCH_STR=$(input-dialog "Search for a movie > " | chomp | tr " " "+")
[ -z "$SEARCH_STR" ] && exit 1
export SEARCH_STR
moviesearch-trakt &
moviesearch-letterboxd &
wait
'''

[tvsearch]
command = '''
# searches trakt for a tv show
SEARCH_STR=$(input-dialog "Search for a TV show > " | chomp | tr " " "+")
[ -z "$SEARCH_STR" ] && exit 1
command -v tttlog >/dev/null 2>&1 && tttlog "$(basename "$0") $SEARCH_STR"
openurl "https://trakt.tv/search/shows?query=${SEARCH_STR}&utf8=%E2%9C%93"
'''

[mediasearch]
command = '''
if SELECTED=$(printf "moviesearch\ntvsearch" | picker -p "Search Media Type > "); then
	"$SELECTED"
fi
'''

[genpass]
shebang = "#!/bin/bash"  # to make sure echo flags work
command ='''
# generates a password and puts it on your clipboard
# uses https://github.com/seanbreckenridge/genpasswd
if ! pw=$(genpasswd "$@"); then
	echo "$pw" >&2
	exit 1
fi
pw=$(head -n 1 <<<"$pw")
if [[ "$(tty)" == "not a tty" ]]; then
	# send notification and copy to clipboard
	clp <<<"${pw}"
else
	echo -e "$pw"
fi
'''

# confirm this is ignoring the correct files by running:
# list-music | grep -Ev "(mp3|flac|ogg|m4a)$"
[list-music]
command='''
# list music files (try to ignore cue/log/album artwork files) in the current directory
fd --type f | grep -iEv "\.(gif|accurip|jpg|png|cue|log|m3u|m3u8|nfo|md5|txt|jpeg|sfv|pdf)$" | sort -n
'''

[play-music]
command='''
# play music in the current directory, recursively
list-music | mpv --playlist=- --no-audio-display
'''


[shuffle-music]
command='''
# Plays songs from this folder, recursively, randomly
list-music | shuf | mpv --playlist=- --no-audio-display
'''

[screenshot-to-imgur]
command='''
# uploads the most recent screenshot from
# ~/Pictures/Screenshots to imgur
FILENAME="$(newest "${SCREENSHOTS:?No SCREENSHOTS environment variable set}")" || exit 1
imgur-uploader "$FILENAME"
IMGUR_URL="$(clippaste)"
printf "%s\n" "$IMGUR_URL" >>/tmp/imgur_urls.log
notify "Uploaded Image to Imgur:" "$IMGUR_URL"
'''

[twitch]
command = '''
# open chatterino and use mpv to stream from twitch
STREAMER="${1:?Pass the twitch user to stream from as the first argument.}"
pgrep -x chatterino >/dev/null || setsid chatterino >/dev/null 2>&1 &
MPVF_PICKER=rofi setsid mpvf "https://www.twitch.tv/${STREAMER}" >/dev/null &
'''

[clipedit]
command = '''
# edit your clipboard in vim
launch "clippaste | vipe | clipcopy"
'''
link = 'edit-clipboard'

# shorthand for clipcopy
[cl]
command='clipcopy'

[clipreset]
command='''
# reset the clipboard formatting
notify "resetting clipboard..."
clippaste | clipcopy
'''

[lynx]
shebang="#!/bin/zsh"
command = '''
# override the lynx binary by
# placing the lynx shortcut
# on $PATH first
LYNX_PATH="$(where lynx | grep -m1 -v "$SHORTCUTS_DIR")" || exit $?
exec "$LYNX_PATH" -accept_all_cookies -cfg="${XDG_CONFIG_HOME}/lynx/lynx.cfg" "$@"
'''

[printer-server]
command = '''
# open the printer interface in the browser
PRINTER_PORT=$(sudo cat /etc/cups/cupsd.conf | grep -i "Listen localhost" | cut -d":" -f2)
printf "localhost:%d" "$PRINTER_PORT" | openurl
'''

[drive-mount]
command= '''
# start the ldm (light device mounter) daemon, to mount devices
echo "use lsblk -f to view disk IDs"
exec sudo ldm -u "$(whoami)"
'''

[ipinfo]
command='''
# get my ip information
curl -s ipinfo.io | gron | grep -v 'json.readme' | gron -u | jq -r 'to_entries[] | "\(.key): \(.value)"'
'''

[qtile-notify-bindings]
command='''
# send a notification with qtile launcher keybindings
notify -t 10000 "qtile bindings:" "$(qtile-bindings --json | jq -r '[.[]|select(.modifier=="control, mod4")] | .[] | "\(.keysym) | \(.command)"' | sed -e "s/spawn('//" -e "s/')$//" -e "s/launch //" -e "s/-developer-edition//" -e "/qtile-notify-bindings/d")"
'''

[webcam-test]
command='''mpv /dev/video0'''

[webcam-pic]
command='''
# open mpv to save a picture (using webcam) in ~/Pictures/pics

declare pics
pics="${PICTURES:?Pictures environment variable not set}/pics"
[[ ! -d "$pics" ]] && mkdir -p "$pics"
cd "$pics" || exit 1
# open mpv so I can take a picture
mpv /dev/video0
exec launch ranger "$pics"
'''
shebang='#!/bin/bash'
link='camera'

[image-dimensions]
command='''
#!/bin/sh
# print the image dimensions for one or more images
for f in "$@"; do
	img_size="$(exiftool "$f" | grep "Image Size")"
	[ -z "$img_size" ] && printf "Could not get 'Image Size' for %s" "$f" 1>&2 || printf "%s %s\n" "${img_size#*: }" "$f"
done
'''

[remove-extension]
command='''
# remove the extension from a filename
FILEPATH="${1:?You must provide a filepath to remove the extension for.}"
echo "${FILEPATH%%.*}"
'''

[replace-extension]
command='''
# replace the extension for a filename
FILEPATH="${1:?Have to provide a filepath to replace the extension for}"
REPLACE_EXTENSION="${2:?Must provide extension to replace extension with}"
echo "${FILEPATH%%.*}.${REPLACE_EXTENSION#.}"
'''

[to-png]
command='''
# convert an image to png
FILEPATH=${1:?Must provide image to convert}
convert "$FILEPATH" "$(replace-extension "$FILEPATH" png)"
'''

[optigif]
command='''
# optimize gif
OLD_GIF="${1:?provide gif to optimize as first argument}"
NEW_GIF="$(remove-extension "$OLD_GIF")-opt.gif"
TMP_GIF='/tmp/optimized.gif'
rm -rf "$TMP_GIF"
gifsicle --colors 256 -O3 "$OLD_GIF" -o "$TMP_GIF" && cp -v "$TMP_GIF" "$NEW_GIF" || exit $?
# overwrite if specified
[ -n "$OPTIGIF_OVERWRITE" ] && du -h "$OLD_GIF" "$NEW_GIF" && mv -v "$NEW_GIF" "$OLD_GIF"
'''

[optijpg]
command='''
FILE="${1:?provide jpeg to optimize as first argument}"
exec jpegtran -copy none -optimize -outfile "$FILE" "$FILE"
'''

[to-icon]
command='''
# convert an image to a 16x16 icon - to favicon size
FILEPATH=${1:?Must provide image to convert}
NEW_FILEPATH="$(remove-extension "$FILEPATH")-icon.png"
exec convert -resize x16 -gravity center -crop 16x16+0+0 -flatten -colors 256 "$FILEPATH" "$NEW_FILEPATH"
'''

[file-mime]
command='''
# get mime type for one or more files
# this is the same as what rifle (ranger) does
exec file --mime-type -Lb "$@"
'''

[dragon-sink]
shebang="#!/bin/bash"
command='''
# brings up a prompt to drag files into.
# If no flags are provided, copies any files
# dragged into the prompt into the current directory.
# if the --mv flag is provided, moves files instead
declare cmd drg files
[[ "$1" = "--mv" ]] && cmd="mv" || cmd="cp"
drg="$(command -v dragon-drag-and-drop)" || drg="$(command -v dragon)" || {
	echo "couldnt find the dragon-drag-and-drop or dragon command"
	exit 1
}
files="$("$drg" --target --and-exit)"
[[ -z "$files" ]] && exit 1
while IFS= read -r f; do
	path="${f#file://}"
	$cmd -v "${path}" "$(pwd)/$(basename "${path}")"
done <<<"$files"
'''

# shorthand for sending lines from vim to pastebin
[vix]
command='exec ix -v'

[clp]
command='''
# accepts input from STDIN, sends text back to STDOUT
# copies what it received to the clipboard
# used in vim:
# https://exobrain.sean.fish/programming/languages/shell_tools/vim/magic_wands/
STDIN="$(cat)"
printf '%s' "$STDIN"
printf '%s' "$STDIN" | clipcopy
if [[ "$(echo "$STDIN" | wc -l)" == 1 ]]; then
	exec notify "${APP:-'clp'}" "$(printf 'Copied to clipboard: %s' "$STDIN")"
else
	exec notify "${APP:-'clp'}" "$(printf 'Copied %d lines to clipboard' "$(echo "$STDIN" | wc -l)")"
fi
'''
shebang="#!/bin/bash"

[clp-args]
command='''
# clp, but accepts input as arguments
echo "$*" | clp
'''

# lots of date shorthands

[tstamp]
command="date +'%Y%m%d%H%M%S'"

[now]
command='date +"%A, %B %e, %Y, %l:%M:%S%p"'

[epoch]
command='date +"%s"'

[weekday]
command='date +"%A" | lower'

[month]
command='date +"%B" | lower'

[year]
command='date +"%Y"'

[lower]
command="tr '[:upper:]' '[:lower:]'"

[upper]
command="tr '[:lower:]' '[:upper:]'"

[capitalize]
shebang="#!/bin/bash"
command="""
# capitalizes the first character of a word from STDIN
s="$(lower)"
echo "$(upper <<<"${s:0:1}")${s:1}"
"""

[newest]
shebang="#!/bin/bash"
command='''
# gets the most recently modified file
# from a directory
IFS=$'\n'
f=($(ls -1 --color=never -trd "${1:-.}"/*)) || exit 1
echo "${f[-1]}"
'''

[lastpic]
command='exec newest "${SCREENSHOTS:?No SCREENSHOTS environment variable set}"'

[previewlastpic]
command='lastpic | sxiv - || exit 1'
link="lastpicpreview"

[lastpicdrag]
command='dragon-drag-and-drop -x "$(lastpic)"'
link="draglastpic"

[urlpic]
command='''
# preview a picture from a URL
rm -rf /tmp/urlpic
mkdir -p /tmp/urlpic && cd /tmp/urlpic || exit 1
URL="${1:-$(clippaste)}"
wget -q "${URL}"
exec mpv --loop "$(newest)"
'''
links = ["previewurlpic", "urlpicpreview"]

[lastdown]
command='exec newest "${DOWNLOADS:?No DOWNLOADS environment variable set}"'

[mvlast]
command='''
FILE="$(lastdown)" || exit 1
exec mv -v "${FILE}" "./$1"
'''

[mvlastpic]
command='''
FILE="$(lastpic)" || exit 1
exec mv -v "${FILE}" "./$1"
'''

[rbg]
shebang="#!/bin/bash"
command="echo -n $'\033[38;2;'$1';'$2';'$3'm'"

[rbgb]
shebang="#!/bin/bash"
command="echo -n $'\033[48;2;'$1';'$2';'$3'm'"

[vic]
command='''
EXECUTABLE="${1:?No Executable provided}"
LOCATION="$(which "$EXECUTABLE")" || exit $?
exec nvim "$LOCATION"
'''

[grep-dotfiles]
shebang="#!/bin/bash"
command='''
# searches all my configuration for a string
# passes arguments received to grep
while read -r filename; do
	grep -Hrin "$@" "$filename"
done < <(list-config | grep -vE "zsh_history|compdump")
'''

[cheat]
shebang="#!/bin/sh"
command='''
command -v tttlog >/dev/null 2>&1 && tttlog "$(basename "$0") $*"
exec curl "https://cheat.sh/$*"
'''

# runs git pull in all my repos in parallel (in 3 seconds). reports errors
[repos-pull-all]
shebang="#!/bin/zsh"
command='''
fd -H --absolute-path --type d --regex "${REPOS}/[^/]+/\.git$" --full-path "$REPOS" | parallel -j 500% "cd {}/.. && has-git-remote && { git pull --quiet && printf '.' || { echo; pwd} }"
echo
'''

[speedtest]
command='wait-for-internet --text "Waiting for internet..." && exec python3 -m speedtest "$@"'

[rcut]
command='''
# cut, but indexing from the right
rev | cut "$@" | rev
'''

[mpv-corner]
command='''
# mpv wrapper to open a video with mpv and put it in the bottom right corner
setsid -f mpv --x11-name=mpv_stream_media "$@" >/dev/null 2>&1
'''

[youtube-dl]
command='''exec python3 -m youtube_dl -o '%(title)s.%(ext)s' -ci "$@"'''

[create-youtube-dl-resolution-str]
command='''
# defaults to about 480p
# otherwise, grabs the format from the FORMAT environment variable
# prints the format string for a particular resolution
FORMAT="${FORMAT:-550}"
exec printf 'bestvideo[height<=%d]+bestaudio/best[height<=%d]' "$FORMAT" "$FORMAT"
'''

[stream-corner]
command='''
# streams and sets the instance name on the mpv window
# this is used with a for_window hook in i3 to put the
# window in the bottom right
exec stream-media --x11-name=mpv_stream_media "$@"
'''

[stream-corner-at]
command='''
# set the FORMAT environment variable to specify maximum height/width
# defaults to about 480p
STREAM_MEDIA_CMD=mpv exec stream-corner --ytdl-format="$(create-youtube-dl-resolution-str)" "$@"
'''

[stream-corner-480]
command='exec stream-corner-at "$@"'

[stream-corner-720]
command='''
export FORMAT=850
exec stream-corner-at "$@"
'''

[stream-audio]
command='STREAM_MEDIA_CMD=mpv exec stream-media --no-video "$@"'

[youtube-dl-at]
command='''
# set the FORMAT environment variable to control resolution
exec youtube-dl -f "$(create-youtube-dl-resolution-str)" "$@"
'''

[youtube-dl-480]
command='''
# download at about 480p
exec youtube-dl-at "$@"
'''

[youtube-dl-720]
command='''
# download at about 720p
export FORMAT=850
exec youtube-dl-at "$@"
'''

[stream-from-firefox]
command='''
# copies the current URL from firefox, and starts streaming it with stream-at-480
# escape, then yy (yank the URL; using the vimium extension)
xvkbd -window Navigator -text "\Eyy"
sleep 1 # just to make sure its copied
exec stream-corner-480
'''

[discord]
command="exec openurl 'https://discord.com/login'"

[slack]
command="exec openurl 'https://app.slack.com/'"

# wrapper for
# https://github.com/seanbreckenridge/mpv-sockets/blob/master/DAEMON.md
[mpv-hist-daemon]
command='''
# don't start if mpv-history-daemon is already running
ps -ef | grep 'mpv-history-daemon /tmp/mpvsockets' | grep -v grep && exit 0
exec mpv-history-daemon /tmp/mpvsockets/ "${HOME}/data/mpv"
'''

[newsboat-force]
command='''
# if another instance of newsboat is open, kill it and open one here
# specifically useful incase newsboat -x reload is going on in the background
pgrep -x newsboat && pkill -x newsboat
cd "${DOWNLOADS:-${HOME}/Downloads}" || exit 1
newsboat
exec i3-msg exec update-rss # update rss afterwards, to update menu bar icon
'''

[alacritty-tmux]
command='exec alacritty -e tmux'

[bash-this-dir]
command='''
COMMAND_STR='THIS_DIR="$(realpath "$(dirname "${BASH_SOURCE[0]}")")"'
echo "$COMMAND_STR" | clipcopy
'''

[extracturls]
command='''
# recieves text from STDIN, extracts unique URLs
# pypi.org/project/urlextract
urls="$(urlextract | sort -u)"
if [ -z "$urls" ]; then
	notify "No URLs found in text"
	exit 1
fi
printf "%s\n" "$urls"
'''

[urlhandler]
command='''
# recieves text from STDIN, extracts unique URLs
# prompts me to pick one and opens it
urls="$(extracturls)" || exit $?
chosen_url="$(echo "$urls" | picker -p 'Pick a URL to open > ')"
if [ -n "$chosen_url" ]; then
	echo "$chosen_url" | clipcopy
	openurl "$chosen_url"
fi
'''

[ssh-keygen-good]
command='ssh-keygen -t rsa -b 4096 -o -a 100'

[mystarsfzf]
command='''
# https://github.com/seanbreckenridge/oh-my-stars
PICKED="$(mystars "$@" | fzf --ansi)" || exit $?
printf '%s\n' "$PICKED"
URL="$(echo "$PICKED" | urlextract)"
# if a URL was extracted, open it
[[ -n "$URL" ]] && {
	openurl "$URL" >/dev/null
	printf '%s' "$URL" | clipcopy
}
'''
shebang="#!/bin/bash"

[screens]
command='sxiv -t "${SCREENSHOTS}"'

["$"]
command='''
# inspired by https://github.com/ImFeelingDucky/undollar
# but one line of shell instead of an npm package
exec "$@"
'''

[up]
command='''
# get location of binary, installed with go
# https://github.com/akavel/up
BIN="$(where up | grep "$GOBIN")"
TERM=xterm "$BIN" --no-colors "$@"
'''
shebang="#!/bin/zsh"

[up-live]
command='''
up --unsafe-full-throttle
'''
shebang="#!/bin/zsh"

[chomp]
command='''
# removes extra space characters from the beginning/end of lines
# removes lines which have just whitespace (no content)
# meant to be piped into, like 'some command | chomp'
sed -E -e 's/^\s*//; s/\s*$//; /^\s*$/d'
'''

[watchtwitch]
command='''
twitchlive -output-format json | jq -r '.[] | .username' | picker -p "who to watch? " | xargs -r twitch
'''

[reshortcuts]
command='''
[ -n "$SHORTCUTS_DIR" ] && [ -d "$SHORTCUTS_DIR" ] && rm -rf "$SHORTCUTS_DIR"
shortcuts create
'''

[alarm]
command = 'paplay /usr/share/sounds/freedesktop/stereo/alarm-clock-elapsed.oga'
