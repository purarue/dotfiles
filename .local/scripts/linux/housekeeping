#!/bin/bash
# A script for unrelated tasks I want to run every so often
# Uses my 'evry' tool to handle how often to run tasks:
# https://github.com/seanbreckenridge/evry

wait-for-internet --quiet

# make sure commands exist
export HAVECMD_REPORT=1

declare -a required_binaries
required_binaries=(evry pythonanywhere_3_months unzip_google_takeout)
for binary in "${required_binaries[@]}"; do
	havecmd "${binary}" || exit $?
done

# approve guestbook comments on https://github.com/seanbreckenridge/glue
APPROVE_SCRIPT="${REPOS}/vps/approve_comments"
if [[ -r "${APPROVE_SCRIPT}" ]]; then
	evry 3 hours -approve-comments && "${APPROVE_SCRIPT}" 2>/dev/null
else
	printf 'Expected approve script to exist at %s\n' "${APPROVE_SCRIPT}" >&2
fi

# backup cache/tokens/logs from my server
BACKUP_SERVER_SCRIPT="${REPOS}/vps/backup_server"
if [[ -r "${BACKUP_SERVER_SCRIPT}" ]]; then
	evry 3 days -backup_fish_server && "${BACKUP_SERVER_SCRIPT}"
else
	printf 'Expected backup script to exist at %s\n' "${BACKUP_SERVER_SCRIPT}" >&2
fi

# make sure my pythonanywhere website doesnt expire:
# https://github.com/seanbreckenridge/pythonanywhere-3-months
evry 2 months -pythonanywhere && python3 -m pythonanywhere_3_months -Hc "$(which chromedriver)"

# run https://github.com/odeke-em/drive to pull/push from google drive
evry 6 hours -google-drive && {
	cd "${HOME}/GoogleDrive/" || exit $?
	echo "Syncing Google Drive..."
	drive pull -ignore-conflict -no-prompt
	drive push -no-prompt
	# if theres a new google takeout, unzip it
	# https://github.com/seanbreckenridge/google_takeout_parser
	# script from https://github.com/seanbreckenridge/HPI-personal
	TAKEOUT_DIR="${HOME}/GoogleDrive/Takeout"
	[[ -e "$TAKEOUT_DIR" ]] && unzip_google_takeout "$TAKEOUT_DIR" && drive push
	# remove takeout dir (only works if directory is empty)
	[[ -e "$TAKEOUT_DIR" ]] && rmdir "${TAKEOUT_DIR}"
}

# https://github.com/seanbreckenridge/grouvee_export
evry 2 months -grouvee-export && python3 -m grouvee_export export

# refresh https://dev.twitch.tv/docs/api/
# so that https://github.com/seanbreckenridge/twitchlive continues to work
evry 2 months -twitch_cli && twitch token

# update https://github.com/seanbreckenridge/mnu_gsheets
evry 5 days -mnu && ssh vultr ~/vps/mnu

# make sure all my music is mp3s
evry 1 day -check-music-extensions && check-music-extensions

# make sure none of my playlist paths are broken
# https://github.com/seanbreckenridge/plaintext-playlist
evry 1 day -plainplay-resolve && plainplay resolve

# fix broken ID3 metadata on my music
# https://github.com/seanbreckenridge/plaintext_playlist_py
evry 1 week -id3stuff && id3stuff

# https://github.com/seanbreckenridge/HPI-personal/blob/master/scripts/mpv_clean_priv_frames
evry 1 day -list-priv-frames && {
	echo 'Checking priv mpv frames...'
	mpv_clean_priv_frames list
}

evry 2 hours -data-sync-conflicts && {
	SYNC_CONFLICTS="$(find-sync-conflicts "$HPIDATA")"
	[[ -n "$SYNC_CONFLICTS" ]] && {
		echo "Sync conflicts in ~/data:"
		echo "$SYNC_CONFLICTS"
	}
}

evry 1 month -discord_download_attachments && discord_download_attachments

# run malexport update https://github.com/seanbreckenridge/malexport/
bash "${HPIDATA}/malexport.job"

evry 3 hours -malexport_partial_update && malexport_partial_update

# https://github.com/seanbreckenridge/my_feed
# once a week, re-index to update any scores/metadata I've updated
if evry 1 week -my-feed-re-index; then
	FEED_REINDEX=1 "${REPOS}/my_feed/index"
else
	# if we didn't just re-index, do a regular index
	evry 1 day -my-feed-index && "${REPOS}/my_feed/index"
fi
