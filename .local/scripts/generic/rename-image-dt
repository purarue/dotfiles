#!/usr/bin/env python3

import sys
from pathlib import Path
from datetime import datetime

import exifread
import click


ALLOWED_EXTENSIONS = {".jpg", ".png", ".jpeg"}


def taken_at(source: Path) -> datetime:
    # use EXIF tag
    with open(source, "rb") as fp:
        tags = exifread.process_file(fp)
        for tag_name in (
            "EXIF DateTimeOriginal",
            "Image DateTime",
            "Date/Time Original",
        ):
            if tag_name in tags:
                data = tags[tag_name].values
                date_obj = datetime.strptime(data, "%Y:%m:%d %H:%M:%S")
                return date_obj.astimezone()

    # use creation time
    return datetime.fromtimestamp(source.stat().st_mtime)


@click.command()
@click.argument("IMAGE", type=click.Path(exists=True, path_type=Path), required=True)
def main(image: Path) -> None:
    if image.suffix.lower() not in ALLOWED_EXTENSIONS:
        click.echo(f"File {image} not in known extensions", err=True)
        sys.exit(1)
    # move a file from its original path to
    # one like generated by Pixel, but like
    # YYYYMMDD_HHMMSSSSS_COPIED.jpg
    new_name = Path(
        f"{taken_at(image).strftime("%Y%m%d_%H%M%S")}{image.suffix.lower()}"
    )
    target = image.parent / new_name
    # if something is named _2 here, it will match the original,
    # but we still know it matches the pattern we want it to then
    if target.name == image.name:
        click.echo("No need to rename, target matches pattern", err=True)
        sys.exit(1)
    if target.exists():
        click.echo("File already exists, adding _#", err=True)
        original = target
        i = 1
        while target.exists():
            target = target.parent / f"{original.stem}_{i}{target.suffix.lower()}"
            i += 1
    click.echo(f"Renaming {image} to {target}")
    image.rename(target)


if __name__ == "__main__":
    main()
