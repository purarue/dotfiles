#!/usr/bin/env bash
# 'sourced reminders'
#
# Instead of reminding me every 'n' duration to do something, this
# uses local data to check if I've done it within that duration
#
# This works by calling a bunch of other scripts which return
# a zero exit code if I've done the thing within the expected
# duration, else exits with exit code '2'
#
# number of scripts which have expired gets displayed in my menu bar,
# and if I click it it sends a notification with the script name,
# which lets me know what I have left to do
#
# this makes these reminders less obstrusive since I don't have to
# feel like I have to do it when some notify-send is sent, but it still
# reminds me to do things since the number sits there while I haven't

declare -a DIRS
DIRS=()

find_execs() {
	for d in "${DIRS[@]}"; do
		find -L "${d}" -type f -executable -print0
	done
}

split_sreminders_path() {
	if [[ -z "$SREMINDERS_PATH" ]]; then
		echo 'The SREMINDERS_PATH environment variable is not set. That should contain a colon-delimited list of directories which contain sreminder jobs. E.g., in your shell profile, set:' >&2
		# shellcheck disable=SC2016
		echo 'export SREMINDERS_PATH="${HOME}/.local/sreminders:${HOME}/data/sreminders"'
		return 1
	fi
	IFS=: read -r -a DIRS <<<"$SREMINDERS_PATH"
	unset IFS
}

main() {
	split_sreminders_path
	while read -r -d $'\0' script; do
		"${script}"
		if (($? == 2)); then
			basename "${script}"
		fi
	done < <(find_execs)
}

main "$@"
