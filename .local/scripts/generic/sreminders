#!/usr/bin/env bash
# 'sourced reminders'
#
# Instead of reminding me every 'n' duration to do something, this
# uses local data to check if I've done it within that duration
#
# This works by calling a bunch of other scripts which return
# a zero exit code if I've done the thing within the expected
# duration, else exits with exit code '2'
#
# number of scripts which have expired gets displayed in my menu bar,
# and if I click it it sends a notification with the script name,
# which lets me know what I have left to do
#
# this makes these reminders less obstrusive since I don't have to
# feel like I have to do it when some notify-send is sent, but it still
# reminds me to do things since the number sits there while I haven't
#
# any additional arguments are assumed to be additional sreminder
# directories which include scripts. Can also create an array in
# ~/.config/sreminder.conf (a bash script) which includes a line like:
# export ADDITIONAL_SREMINDER_DIRS=("/path/to/more/sreminder/dirs" "/another/path")

DEFAULT_SREMINDER_DIR="${HOME}/.local/scripts/sreminders"
SREMINDER_CONFIG="${HOME}/.config/sreminder.conf"
declare -a DIRS
DIRS=()

find_execs() {
	for d in "${DIRS[@]}"; do
		find -L "${d}" -type f -executable -print0
	done
}

add_dir_if_exists() {
	[[ -d "${1}" ]] && DIRS+=("$1")
}

# add all possible sreminder script directories
iter_dirs() {
	add_dir_if_exists "${DEFAULT_SREMINDER_DIR}"
	# process args which contain additional directories
	for arg in "$@"; do
		add_dir_if_exists "${arg}"
	done
	# process config file which may additional directories
	[[ -e "${SREMINDER_CONFIG}" ]] && source "${SREMINDER_CONFIG}"
	if [[ -n "${ADDITIONAL_SREMINDER_DIRS[*]}" ]]; then
		for arg in "${ADDITIONAL_SREMINDER_DIRS[@]}"; do
			add_dir_if_exists "${arg}"
		done
	fi
}

main() {
	iter_dirs "$@"
	while read -r -d $'\0' script; do
		"${script}"
		if (($? == 2)); then
			basename "${script}"
		fi
	done < <(find_execs)
}

main "$@"
