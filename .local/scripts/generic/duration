#!/usr/bin/env python3

import json
import subprocess
from typing import Optional, Tuple, Sequence
from functools import lru_cache

import click


@lru_cache(maxsize=32)
def evry_subshell_seconds(text: str) -> Optional[Tuple[int, str]]:
    cmd = f"EVRY_JSON=1 evry -duration {text}"
    proc = subprocess.run(
        cmd,
        shell=True,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True,
        encoding="utf-8",
    )
    if proc.returncode not in (0, 2):
        return None
    data = json.loads(proc.stdout)
    if not data:
        return None

    output_ms: Optional[int] = None
    output_pretty: Optional[str] = None

    for item in data:
        if item["type"] == "duration":
            output_ms = int(item["body"])
        elif item["type"] == "duration_pretty":
            output_pretty = item["body"]

    if output_ms is None or output_pretty is None:
        return None

    return (output_ms // 1000, output_pretty)


@click.command()
@click.option(
    "-v",
    "--verbose",
    is_flag=True,
    help="Print the pretty duration as well as the seconds",
    default=False,
)
@click.argument("TEXT", nargs=-1, required=False)
def main(text: Sequence[str], verbose: bool) -> None:
    data = " ".join(text)
    # assume seconds
    if data.isnumeric():
        data = f"{data}s"
    if not data.strip():
        click.echo("Pass a duration to convert as positional arguments", err=True)
        raise SystemExit(1)
    result = evry_subshell_seconds(data.strip())
    if result is None:
        raise SystemExit(1)
    if verbose:
        click.echo(f"{result[0]} {result[1]}")
    else:
        click.echo(result[0])


if __name__ == "__main__":
    main()
