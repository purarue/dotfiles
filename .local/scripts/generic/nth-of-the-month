#!/usr/bin/env python3

"""
Print the dates of the 'nth of the month'.

For example:

1st Sunday of the month
4th Friday of the month
"""

from datetime import date, timedelta, datetime
from enum import IntEnum
from typing import Iterator

import click


class Day(IntEnum):
    Monday = 0
    Tuesday = 1
    Wednesday = 2
    Thursday = 3
    Friday = 4
    Saturday = 5
    Sunday = 6

    def is_day(self, d: date) -> bool:
        return self.value == d.weekday()


def iter_nth_of_the_month(
    *,
    day: Day,
    nth: int,
    start_date: date,
) -> Iterator[date]:
    dy = start_date.replace(day=1)
    month = dy.month
    target_nth = nth
    while True:
        while month == dy.month:
            if day.is_day(dy):
                # special case, yield every week
                if nth == 0:
                    yield dy
                else:
                    target_nth -= 1
                    if target_nth == 0:
                        yield dy
            dy += timedelta(days=1)
        month = dy.month
        target_nth = nth


def iter_nth_of_the_month_till(
    *, day: Day, nth: int, start_date: date, end_date: date
) -> Iterator[date]:
    for d in iter_nth_of_the_month(start_date=start_date, day=day, nth=nth):
        if d > end_date:
            break
        yield d


def _date_coalesce(d: date | datetime) -> date:
    if isinstance(d, datetime):
        return d.date()
    return d


day_mapping: dict[str, Day] = {d.name.lower(): d for d in Day}
day_type = click.Choice(list(day_mapping))
week_type = click.IntRange(min=0, max=5)


@click.command()
@click.option(
    "-d",
    "--day",
    type=day_type,
    required=False,
)
@click.option(
    "-n",
    "--week-of-the-month",
    help="The nth week of the month. 0 means every week.",
    type=week_type,
    required=False,
)
@click.option("-s", "--start-date", type=click.DateTime(), default=None)
@click.option("-e", "--end-date", type=click.DateTime(), default=None)
def main(
    day: str | None,
    week_of_the_month: int | None,
    start_date: datetime | date | None,
    end_date: date | date | None,
) -> None:
    if day is None:
        day = click.prompt("Day", type=day_type, err=True)
    assert day is not None, "day is None"
    if week_of_the_month is None:
        week_of_the_month = click.prompt(
            "Week of the month (0 for every week)", type=week_type, err=True, default=0
        )
        assert week_of_the_month is not None, "week_of_the_month is None"
    day_enum: Day = day_mapping[day]
    if start_date is None:
        start_date = date.today()
    if end_date is None:
        end_date = start_date + timedelta(days=365)

    assert start_date < end_date

    for d in iter_nth_of_the_month_till(
        day=day_enum,
        nth=week_of_the_month,
        start_date=_date_coalesce(start_date),
        end_date=_date_coalesce(end_date),
    ):
        click.echo(d)


if __name__ == "__main__":
    main()
