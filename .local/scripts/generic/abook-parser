#!/usr/bin/env python3

import json
import configparser
from typing import Literal, get_args
from pathlib import Path
import click

OutputType = Literal["abook", "json"]


@click.command()
@click.option(
    "-o", "--output-type", type=click.Choice(get_args(OutputType)), default="abook"
)
@click.argument(
    "FILE", type=click.Path(exists=True, path_type=Path, allow_dash=True), required=True
)
def main(output_type: OutputType, file: Path) -> None:
    """
    Parse the addressbook file, and sort it by the name field
    """
    if str(file) == "-":
        text = click.get_text_stream("stdin").read()
    else:
        text = file.read_text()

    config = configparser.ConfigParser()
    config.read_string(text)

    sort_by = "name"

    data = {}
    for section in config.sections():
        data[section] = dict(config.items(section))

    assert "format" in data, f"format section not found in {data}"
    format = data.pop("format")

    has_sort_key = []
    cant_sort = []

    for key, val in data.items():
        if sort_by in val:
            has_sort_key.append(val)
        else:
            cant_sort.append(key)

    i = 0
    has_sort_key.sort(key=lambda x: x[sort_by].casefold())

    if output_type == "abook":
        print("[format]")
        for key, value in format.items():
            print(f"{key}={value}")

        for val in has_sort_key:
            print(f"\n[{i}]")
            for k, v in val.items():
                print(f"{k}={v}")
            i += 1

        for key in cant_sort:
            print(f"\n[{i}]")
            for k, v in data[key].items():
                print(f"{k}={v}")
            i += 1
    else:
        combined = {"format": format, "contacts": has_sort_key + cant_sort}
        print(json.dumps(combined, indent=4))


if __name__ == "__main__":
    main(prog_name="abook-parser")
