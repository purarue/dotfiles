#!/usr/bin/env python3

"""
List all birthdays in my addressbook
"""

from __future__ import annotations

import os
import json
from datetime import date, timedelta
from typing import Literal, NamedTuple, Iterator, assert_never, get_args, Iterable

import click
from abook_parser.parser import AbookFile

abook_file = os.environ["ABOOK_FILE"]
today = date.today()


class Info(NamedTuple):
    name: str
    birthday: date

    def with_current_year(self) -> date:
        return self.birthday.replace(year=today.year)

    def dict(self, fmt: DateFormat) -> dict[str, str]:
        return {
            "name": self.name,
            "birthday": (
                self.birthday.strftime("%Y-%m-%d")
                if fmt == "iso"
                else self.birthday.strftime("%b %d")
            ),
        }


def parse_birthday(val: str) -> date:
    count = val.count("-") + 1
    if count not in (2, 3):
        raise ValueError(f"{val} is an invalid birthday")
    elif count == 3:
        return date.fromisoformat(val)
    else:
        return date.fromisoformat(f"{today.year + 1}-{val}")


def iter_birthdays(check: bool = False) -> Iterator[Info]:
    ab = AbookFile(abook_file)
    for vv in ab.contacts:
        if birthday := vv.get("birthday"):
            try:
                dt = parse_birthday(birthday)
            except ValueError as e:
                err = f"Invalid birthday: {vv.get('name')} - {birthday}"
                if check:
                    raise ValueError(err) from e
                else:
                    click.echo(err)
                    continue
            else:
                yield Info(vv["name"], dt)


OutputFormat = Literal["plain", "json"]
DateFormat = Literal["iso", "human"]


@click.command(help=__doc__)
@click.option(
    "--strict/--no-strict",
    is_flag=True,
    default=False,
    help="Raise on invalid birthday",
)
@click.option(
    "-o",
    "--output",
    type=click.Choice(get_args(OutputFormat)),
    default="plain",
    help="output format",
)
@click.option(
    "-f",
    "--format",
    "_format",
    type=click.Choice(get_args(DateFormat)),
    default="human",
    help="date format",
)
@click.option(
    "-u", "--upcoming", default=None, type=int, help="Only show upcoming N days"
)
def main(
    strict: bool, output: OutputFormat, _format: DateFormat, upcoming: int
) -> None:
    birthdays: Iterable[Info] = list(iter_birthdays(check=strict))
    birthdays.sort(key=lambda b: b.with_current_year())
    if upcoming is not None:
        if upcoming > 365:
            upcoming = 365
        upcoming_set: set[str] = set(
            d.strftime("%m-%d")
            for d in (today + timedelta(days=n) for n in range(upcoming + 1))
        )
        birthdays = filter(
            lambda b: b.birthday.strftime("%m-%d") in upcoming_set, birthdays
        )

    disp: list[dict[str, str]] = [b.dict(_format) for b in birthdays]
    match output:
        case "plain":
            for b in disp:
                click.echo(f"{b["birthday"]} | {b["name"]}")
        case "json":
            click.echo(json.dumps(disp))
        case _:
            assert_never(output)


if __name__ == "__main__":
    main()
