#!/usr/bin/env python3

"""
List all birthdays in my addressbook
"""

from __future__ import annotations

import os
import json
from datetime import date, timedelta
from typing import Literal, NamedTuple, Iterator, assert_never, get_args, Iterable

import click
from abook_parser.parser import AbookFile

abook_file = os.environ["ABOOK_FILE"]
this_year = date.today().year


class Info(NamedTuple):
    name: str
    birthday: date

    def with_current_year(self) -> Info:
        return Info(self.name, self.birthday.replace(year=this_year))

    def dict(self, fmt: DateFormat) -> dict[str, str]:
        return {
            "name": self.name,
            "birthday": (
                self.birthday.strftime("%Y-%m-%d")
                if fmt == "iso"
                else self.birthday.strftime("%b %d")
            ),
        }


def iter_birthdays() -> Iterator[Info]:
    ab = AbookFile(abook_file)
    for vv in ab.items.values():
        if birthday := vv.get("birthday"):
            dt = date.fromisoformat(birthday)
            yield Info(vv["name"], dt)


OutputFormat = Literal["plain", "json"]
DateFormat = Literal["iso", "human"]


@click.command(help=__doc__)
@click.option(
    "-o",
    "--output",
    type=click.Choice(get_args(OutputFormat)),
    default="plain",
    help="output format",
)
@click.option(
    "-f",
    "--format",
    "_format",
    type=click.Choice(get_args(DateFormat)),
    default="human",
    help="date format",
)
@click.option(
    "-u", "--upcoming", default=None, type=int, help="Only show upcoming N days"
)
def main(output: OutputFormat, _format: DateFormat, upcoming: int) -> None:
    birthdays: Iterable[Info] = list(iter_birthdays())
    birthdays.sort(key=lambda b: b.with_current_year().birthday)
    if upcoming is not None:
        upcoming_set: set[str] = set(
            d.strftime("%m-%d")
            for d in (date.today() + timedelta(days=n) for n in range(upcoming + 1))
        )
        birthdays = filter(
            lambda b: b.birthday.strftime("%m-%d") in upcoming_set, birthdays
        )

    disp: list[dict[str, str]] = [b.dict(_format) for b in birthdays]
    match output:
        case "plain":
            for b in disp:
                click.echo(f"{b["birthday"]} | {b["name"]}")
        case "json":
            click.echo(json.dumps(disp))
        case _:
            assert_never(output)


if __name__ == "__main__":
    main()
