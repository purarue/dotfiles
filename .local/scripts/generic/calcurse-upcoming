#!/usr/bin/env python3

from typing import Literal, get_args, assert_never
from datetime import datetime, date, timedelta

import click
from calcurse_load.parse import Apt, parse_events
from my.core.serialize import dumps


def format_future_datetime(now: date, future_dt: datetime):
    delta_days = (future_dt.date() - now).days

    if delta_days == 0:
        return f"today at {future_dt.strftime('%I:%M %p')}"
    elif delta_days == 1:
        return f"tomorrow at {future_dt.strftime('%I:%M %p')}"
    elif delta_days < 7:
        return future_dt.strftime("%A at %I:%M %p")
    elif delta_days < 14:
        return f"next {future_dt.strftime('%A')} at {future_dt.strftime('%I:%M %p')}"
    elif future_dt.year == now.year:
        return future_dt.strftime("%B %d at %I:%M %p")
    else:
        return future_dt.strftime("%B %d, %Y at %I:%M %p")


OutputFormat = Literal["json", "raw", "human"]


@click.command(
    context_settings={"help_option_names": ["-h", "--help"], "max_content_width": 120}
)
@click.option("-d", "--days", type=int, default=7, help="Number of days to show")
@click.option(
    "-f",
    "--format",
    type=click.Choice(get_args(OutputFormat)),
    default="human",
    help="Output format",
)
@click.option(
    "--strip-datasource/--no-strip-datasource",
    is_flag=True,
    default=True,
    help="Remove sources from summary",
)
def main(days: int, format: OutputFormat, strip_datasource: bool) -> None:
    # filter to items that start in the next week
    now = datetime.now()
    events: list[Apt] = [
        e
        for e in parse_events()
        if e.start_dt > now and e.start_dt < now + timedelta(days=days)
    ]
    events.sort(key=lambda e: e.start_dt)

    match format:
        case "json":
            print(dumps(events))
        case "raw":
            for e in events:
                print(e.raw)
        case "human":
            now_d = now.date()
            for e in events:
                describe_date = format_future_datetime(now_d, e.start_dt)
                print(
                    f"{describe_date.lower()} | {e.summary} {f'[{e.datasource}]' if not strip_datasource and e.datasource is not None else ''}"
                )
        case _:
            assert_never(format)


if __name__ == "__main__":
    main()
