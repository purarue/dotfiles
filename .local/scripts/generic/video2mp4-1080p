#!/usr/bin/env bash

DIR=CONVERTED_MP4

is_vertical_video() {
	local rotation
	rotation="$(exifattr "$1" Rotation)"
	if [[ "$rotation" = 90 || "$rotation" = 270 ]]; then
		return 0
	else
		return 1
	fi
}

helpmsg() {
	printf "%s\n" "desc: convert to mp4 video (x264)"
	printf "%s\n" "depend: ffmpeg x264 faac"
	printf "\n"
	printf "%s\n" "usage: ${0##*/} [file]"
	printf "\n"
	printf "%s\n" "  $ ${0##*/} file.avi"
	printf "%s\n" "  $ ${0##*/} file1.avi file2.avi file3.avi"
	printf "%s\n" "  $ ${0##*/} *.avi"
}
if [ $# -lt 1 ]; then
	helpmsg
	exit 1
elif [ "$1" = -h ] || [ "$1" = --help ]; then
	helpmsg
	exit 0
else
	mkdir -p "$DIR"
	myArray=("$@")
	for arg in "${myArray[@]}"; do
		if [[ -f "$arg" && ! -f "$DIR/${arg%.*}.mp4" ]]; then
			scale='1080:-1'
			if is_vertical_video "$arg"; then
				scale='-1:1080'
			fi
			ffmpeg -i "$arg" -vf scale="$scale" -codec:v libx264 -preset medium -crf 23 -codec:a aac -qscale:a 6 -strict normal "$DIR/${arg%.*}.mp4"
			oldsize="$(du -h "$arg" | awk '{print $1}')"
			newsize="$(du -h "$DIR/${arg%.*}.mp4" | awk '{print $1}')"
			echo "old size: $oldsize"
			echo "new size: $newsize"
		else
			printf "%s\n" "$arg is invalid or output file already exist"
			continue
		fi
	done
fi
